<%
	
	
	admit = Admit.find params[:admit_id]
	
	records = admit.records
	
	sense_label = DataRecord.get_sense_label #%w{ความดันโลหิต อัตราการเต้นหัวใจ ปริมาณออกซิเจน อุณหภูมิ น้ำหนัก ส่วนสูง}
	sense_unit = DataRecord.get_sense_unit #%w{mmHg bpm % &#8451; kg cm}
	
	
    obs = %w{bp_sys bp_dia bp_mean pr spo2 bmi weight height rr temp}
	pmap = {} 
	
	for i in records
			
		for o in obs
		
			v = i[o]
			if v and v>0
					
				pmap[o] = [] unless pmap[o]
				
				pmap[o] << {:t=>i.stamp,:v=> v}
					
			end
			
		end
		
		
	end



	
	
	
%>


<style>

	div.tooltip {	
	    position: absolute;			
	    text-align: center;			
	    width: 100px;					
				
	    padding: 2px;				
	    font: 14px sans-serif;		
	    background: lightsteelblue;	
	    border: 0px;		
	    border-radius: 8px;			
	    pointer-events: none;			
	}
	</style>
<script>

	function colorScale(i){
		
		switch(i) {
		  case 'pr':
		    return '#43a442'
		    break;
		  case 'hr':
		    return '#01bf02'
		    break;
	  	  case 'bp_sys':
	    	return 'blue'
	    	break;
	  	  case 'bp_mean':
  			  return '#ccccff'
  			  break;
  	  	  case 'bp_dia':
    		return 'blue'
    		break;
	  	  case 'spo2':
			return '#00b3b7'
		    break;
	  	  case 'temp':
			return '#00b3f7'
		    break;
  	      case 'rr':
		    return '#fdd245'
	        break;
  	      case 'co2':
	        return '#bcaf06'
            break;
	      case 'weight':
	    return '#fd4545'
        break;
	      case 'height':
        return '#43a442'
          break;
		
			
		  default:
		    return 'blue'
		}
		
		
	}
		

var datum = <%=pmap.to_json%>
	
	
// Define the div for the tooltip
var div = d3.select("body").append("div")	
    .attr("class", "tooltip")				
    .style("opacity", 0);



</script>	


<%
	
	charts = %w{bp_sys,bp_mean,bp_dia pr,spo2 temp,rr weight,height}
	# charts = %w{bp_sys,bp_dia,bp_mean,pr,spo2,temp,rr,weight}
	
	
	
	charts.each_with_index do |chart,ci|  
		
		
		
		
		ps = chart.split(",")

%>	
<% for s in ps %>
<span class="<%=s%>"><b><%=s.split("_")[-1].humanize%></b></span> 
<% end %>
<div id="chart-<%=ci%>">
</div>	


<script>


var formatTime = d3.timeFormat("%e %B");
      xdata = [];

var w = window.innerWidth;
if(w>1000)w=1000
// set the dimensions and margins of the graph
var margin = {top: 30, right: 30, bottom: 30, left: 60},
    width = w - margin.left - margin.right,
    height = 200 - margin.top - margin.bottom;
	
	
xscale = d3.scaleTime()
    .range([0, width]);

yscale = d3.scaleLinear()
    .range([height-10, 10]);	

// append the svg object to the body of the page
var svg2 = d3.select("#chart-<%=ci%>")
  .append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
  .append("g")
    .attr("transform",
          "translate(" + margin.left + "," + margin.top + ")");


		  
		  
	 	var line = d3.line()
	      .x(function(d) { return xscale(d.t); })
	 	 .y(function(d) { return yscale(d.v); })
		  
<% for s in ps %>
		  	
		 $('.<%=s%>').css('color',  colorScale('<%=s%>'))
		
		  data = datum['<%=s%>']
		  
		  data.forEach(function(d,i) {
		  d.t = Date.parse(d.t);
		  });
		  
		  xdata = xdata.concat(data)

<% end %>		  
		  
		  xscale.domain(d3.extent(xdata, function(d) { return d.t; }));
		  yscale.domain(d3.extent(xdata, function(d) { return d.v; }));
		  
	    svg2.append("g")
	      .attr("transform", "translate(0," + height + ")")
	      .call(d3.axisBottom(xscale).tickSize(-height).ticks(10));

	    svg2.append("g")
	      .call(d3.axisLeft(yscale).tickSize(-width).ticks(10))
	      .select(".domain").remove()
  		svg2.selectAll(".tick line").attr("stroke", "#cbcbcb")

	
<% for s in ps %>

	   s = '<%=s%>'
	   
	   data = datum[s]
		  


	
	 g = svg2.append("g")
	 	 	 g.append("path")
	       .datum(data)
	       .attr("class", "line")
	 	 .attr("d", line)
	 	 .attr("stroke", colorScale('<%=s%>'))
	      .attr("stroke-width", 2)
		 .attr("fill", "none");
		 
		 if(s=='bp_dia')
		 g.style("stroke-dasharray", ("3, 3"))

	   // Add dots
	   svg2.append('g')
	     .selectAll("dot")
	     .data(data)
	     .enter()
	     .append("circle")
	       .attr("cx", function (d) { return xscale(d.t); } )
	       .attr("cy", function (d) { return yscale(d.v); } )
	       .attr("r", 5)
		   .attr("stroke-width", 2)
	       .style("fill", 'white')
		   .attr("stroke", colorScale(s))
		   .on("mouseover", function(d) {		
		             div.transition()		
		                 .duration(200)		
		                 .style("opacity", .9);		
		             div.html(formatTime(d.t) + "<br/>" + '<%=s%>' +":" + d.v)	
		                 .style("left", (d3.event.pageX) + "px")		
		                 .style("top", (d3.event.pageY - 28) + "px");	
		             })					
		   .on("mouseout", function(d) {		
		             div.transition()		
		                 .duration(500)		
		                 .style("opacity", 0);	
		   })
		   .on("click",function(d){
		   		
				// alert('Under construction')
			   console.log('click '+formatTime(d.t) )
			
		   })	 
<% end %>

  // // Add X axis
  // var x = d3.scaleLinear()
  //   .domain([4*0.95, 8*1.001])
  //   .range([ 0, width ])
  // svg2.append("g")
  //   .attr("transform", "translate(0," + height + ")")
  //   .call(d3.axisBottom(x).tickSize(-height*1.3).ticks(10))
  //   .select(".domain").remove()
  //
  // // Add Y axis
  // var y = d3.scaleLinear()
  //   .domain([-0.001, 9*1.01])
  //   .range([ height, 0])
  //   .nice()
  // svg2.append("g")
  //   .call(d3.axisLeft(y).tickSize(-width*1.3).ticks(7))
  //   .select(".domain").remove()
  //
		

</script>
	
<% end %>

	