<%
   
# _id,contact_phone,contact_name,chief_complain,init_cbd_code,patient_underlying,patient_type,patient_name,patient_gender,patient_age,patient_birth_date,patient_weight,patient_height,patient_bmi,patient_id,patient_cid,patient_nationality,patient_hn,patient_phone,case_type,ambulance_id,channel_id,dispatch_note,shift,date,request_at,status,schedule_from,schedule_to,location,address,latlng,admit_id,zone_id,case_no,user_id,init_cbd_color,updated_at,created_at,dispatch_at,station_id,tracking_status,paramedic_start_at,paramedic_status,cpr_start_at,cpr_status,route_type,transfer_hospital,transfer_hospital_id,bls_operation,completed_at,diagnosis,discharge_stamp,dispatch_cbd_color,dispatch_time,init_dbp,init_gcs,init_hr,init_rr,init_sbp,init_spo2,init_temp,init_vs_stamp,operation_cancel_reason,operation_hospital,operation_result,over_activate_time_reason,over_response_time_reason,over_time_managment,patient_reimbursement,repeat_gcs,scene_cbd_color,screen_cbd_color,screen_dbp,screen_gcs,screen_hr,screen_rr,screen_sbp,screen_spo2,screen_temp,screen_vs_stamp,special_type,summary,transfer_hn,export_data,export_data_log,activation_time,bls_onscene,bls_request,onscene_time,response_time,total_time,transfer_time,gps_distance,gps_duration,meeting_key



  sources = EMSCase.all 

  sources.collect!{|i| 
    
    if i.init_cbd_code
      code = EMSCode.find(i.init_cbd_code)
      group = EMSCodeGroup.find(code.group_id)
      i['cbd_code'] = "#{group.code}.#{group.name.slice(0..6)}"
    end

    i
  
  }
  #puts params.inspect
  puts sources[0].to_json

  data = {:params=>params}
  body = request.body.read 
  px = JSON.parse(body)
  cmd = JSON.parse(px['cmd'])
  puts cmd.inspect
  puts "filter "+px['filter'].inspect

  if px['filter']
     k,v = px['filter'].split()
     if k
         sources.collect!{|i| i if i[k.to_sym]==v }.compact! 
    end
  end
  
  
  for i in cmd
  
        map = {}
        
        for j in sources  
            
            if i['col']
                
                k = j[i['col'].to_sym] 
           
                map[k] = 0 unless map[k]
                map[k] += 1 
                
            end
    end
        
        list = []
        
        map.each_pair do |k,v|
            list << {label:k, value:v, key:k}
        end
        
        data[i['name']] = list
    
  end
  
  
  
%><%=data.to_json.html_safe%>
