<%
   
# _id,contact_phone,contact_name,chief_complain,init_cbd_code,patient_underlying,patient_type,patient_name,patient_gender,patient_age,patient_birth_date,patient_weight,patient_height,patient_bmi,patient_id,patient_cid,patient_nationality,patient_hn,patient_phone,case_type,ambulance_id,channel_id,dispatch_note,shift,date,request_at,status,schedule_from,schedule_to,location,address,latlng,admit_id,zone_id,case_no,user_id,init_cbd_color,updated_at,created_at,dispatch_at,station_id,tracking_status,paramedic_start_at,paramedic_status,cpr_start_at,cpr_status,route_type,transfer_hospital,transfer_hospital_id,bls_operation,completed_at,diagnosis,discharge_stamp,dispatch_cbd_color,dispatch_time,init_dbp,init_gcs,init_hr,init_rr,init_sbp,init_spo2,init_temp,init_vs_stamp,operation_cancel_reason,operation_hospital,operation_result,over_activate_time_reason,over_response_time_reason,over_time_managment,patient_reimbursement,repeat_gcs,scene_cbd_color,screen_cbd_color,screen_dbp,screen_gcs,screen_hr,screen_rr,screen_sbp,screen_spo2,screen_temp,screen_vs_stamp,special_type,summary,transfer_hn,export_data,export_data_log,activation_time,bls_onscene,bls_request,onscene_time,response_time,total_time,transfer_time,gps_distance,gps_duration,meeting_key
  data = {:params=>params}
  body = request.body.read 

  px = JSON.parse(body)

  query = {:date=>{"$gte"=>px['start_date'], "$lte"=>px['end_date']}}
  query[:shift] = px['shift'] if px['shift'] and px['shift']!=''
  query[:init_cbd_color] = px['scene_cbd_color'] if px['scene_cbd_color'] and px['scene_cbd_color']!=''
  query[:patient_type] = px['patient_type'] if px['patient_type'] and px['patient_type']!=''

  sources = EMSCase.where(query).all 

  sources.collect!{|i| 
    
    if i.init_cbd_code
      code = EMSCode.find(i.init_cbd_code)
      group = EMSCodeGroup.find(code.group_id)
      i['cbd_code'] = "#{group.code}.#{group.name.slice(0..6)}"
    end

    if i.ambulance_id
      ambulance = Ambulance.find(i.ambulance_id)
      i['ambulance'] = ambulance.name if ambulance
      unless ambulance
        cmd = EMSCommand.where(case_id: i.id).first
        if cmd
          ambulance = Ambulance.find(cmd.ambulance_id)
          i['ambulance'] = ambulance.name if ambulance
        end
      end
      i['ambulance'] = 'NA' if ambulance.nil?
    end

    if true
      t = i.response_time
      #puts t
      
      if t.nil?
        t = 'NA'
      else
        t = t.to_i
      if t<2 
        t="<2"
      elsif t<4
        t="<4"
      elsif t<6
        t="<6"
      elsif t<8
        t="<8"
      elsif t<10
        t="<10"
      else 
        t=">10"
      end

      end
      i['response_time_group']  = t
    end

    if i.total_time
      i['total_time'] = i.total_time.to_i
    end

    i
  
  }
  #puts params.inspect
  puts sources[0].to_json


  cmd = JSON.parse(px['cmd'])
  puts cmd.inspect
  puts "filter "+px['filter'].inspect

  if px['filter']
     k,v = px['filter'].split()
     if k
         sources.collect!{|i| i if i[k.to_sym]==v }.compact! 
    end
  end
  
  data['positions'] = sources.collect{|i| 
  t = i.latlng.split(',')
  {lat:t[0].to_f, lng:t[1].to_f, label:i.case_no} }  
  
  for i in cmd
  
        map = {}
        
        for j in sources  
            
            if i['col']
                
                k = j[i['col'].to_sym] 
           
                map[k] = 0 unless map[k]
                map[k] += 1 
                
            end
    end
        
        list = []
        
        map.each_pair do |k,v|
            list << {label:k, value:v, key:k}
        end
        
        data[i['name']] = list
    
  end
  
  
  data[:number_of_cases] = sources.count

  sum = sources.count.to_f
  triage = {'red'=>5,'yellow'=>4,'green'=>3,'white'=>2,'black'=>1, nil=>nil, ""=>nil}

  data[:dispatch_time] = format("%.2f ",sources.collect{|i| 1 if  i.dispatch_time and i.dispatch_time <= 1 }.compact.sum/sum*100.0)+'%'
  data[:activate_time] = format("%.2f ",sources.collect{|i| 1 if i.activation_time and i.activation_time <= 2 }.compact.sum/sum*100.0)+'%'
  data[:response_time] = format("%.2f ",sources.collect{|i| 1 if i.response_time and i.response_time <= 8  and i.init_cbd_color=='red'}.compact.sum/sum*100.0)+'%'
  data[:scene_time] = format("%.2f ",sources.collect{|i| 1 if i.onscene_time and i.onscene_time <= 10 }.compact.sum/sum*100.0)+'%'
  data[:scene_time_over_10m] = format("%.2f ",sources.collect{|i| 1 if i.onscene_time and i.onscene_time > 10 }.compact.sum/sum*100.0)+'%'
  data[:average_time_5km] = format("%.2f ",sources.collect{|i| i.response_time.to_i if i.response_time and i.gps_distance and i.gps_distance<5000 }.compact.sum/sum)
  data[:average_time_10km] = format("%.2f ",sources.collect{|i| i.response_time.to_i if i.response_time and i.gps_distance and i.gps_distance<10000 }.compact.sum/sum)
  data[:average_time_over_10km] = format("%.2f ",sources.collect{|i| i.response_time.to_i if i.response_time and i.gps_distance and i.gps_distance>10000 }.compact.sum/sum)
  data[:over_triage] = sources.collect{|i| 1 if  i.init_cbd_color and i.scene_cbd_color and triage[i.init_cbd_color] and triage[i.scene_cbd_color] and triage[i.init_cbd_color] > triage[i.scene_cbd_color] }.compact.sum
  data[:under_triage] = sources.collect{|i| 1 if  i.init_cbd_color and i.scene_cbd_color and triage[i.init_cbd_color] and triage[i.scene_cbd_color] and triage[i.init_cbd_color] < triage[i.scene_cbd_color] }.compact.sum


# for i in sources
#  if i.init_cbd_color and i.scene_cbd_color 
#    puts i.init_cbd_color+' '+i.scene_cbd_color+' '+triage[i.init_cbd_color].to_s+' '+triage[i.scene_cbd_color].to_s
#  end
# end



%><%=data.to_json.html_safe%>
