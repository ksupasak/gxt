
  <script src="https://d3js.org/d3.v7.min.js"></script>

<script>


class Core {
    
    
  constructor(data_url) {
      
    this.url = data_url;
    this.dataset = []
    this.charts = []
    this.options = {}
    this.filter = ""
    this.query = {}
  
  }

  // method
   setData(name, col, options={}) {
      
      this.dataset.push({name:name, col:col, options:options})
      
  }
  
  params(){
     return JSON.stringify(this.dataset);
  }
  
  inspect(){
      console.log(this.dataset)
  }
  
  callback(name, col, value){
      alert("filter "+name+" "+col+" "+value)
      this.filter = ""+col+" "+value
      process(this.query)
  }
  
  setOptions(options={}){
      this.options = options
  }
  
  showBar(name, col, options={}){

       this.dataset.push({name:name, col:col, options:options})
       options['callback'] = this.callback
       if(this.options['callback']){
            options['callback'] = this.options['callback']
       }
       options['name'] = name
       options['col'] = col
       this.charts.push({name:name, type:'bar', col:col, options:options})
       
  }
  
  showDonut(name, col, options={}){
       this.dataset.push({name:name, col:col, options:options})
       options['callback'] = this.callback
       if(this.options['callback']){
            options['callback'] = this.options['callback']
       }
       options['name'] = name
       options['col'] = col
       this.charts.push({name:name, type:'donut', col:col, options:options})
       
  }
  
  update(response){
       
       console.log(response)

       results = JSON.parse(response);
       
       console.log(results)

       for(var i=0;i<this.charts.length;i++){
           
           var chart = this.charts[i]
           
         
         
           if(chart.type=='bar'){
               showBar(chart['name']+" svg", results[chart['name']], chart['options'])
           }else
           if(chart.type=='donut'){
               showDonut(chart['name']+" svg", results[chart['name']], chart['options'])
           }
           
           
       }
      
  }
  
  process(formData){
      this.query = formData
      
      if(this.filter.length>0){
        formData['filter'] = this.filter
      }

      
      formData['cmd'] = this.params()
      
      const core = this
      console.log(JSON.stringify(formData))
      
      $.ajax({
      type: 'POST',
      url:  core.url , // <-- your backend endpoint
      data: JSON.stringify(formData),
      contentType: 'application/json',
      success: function (response) {
          
        core.update(response)
        
      },
      error: function (xhr, status, error) {
        console.error('AJAX error:', error);
        $('#results').html('<p style="color:red">Something went wrong.</p>');
      }
    });
    
  }
  
  

}

    function init_report(url){
        
        return new Core(url);
        
    }
    
  
    
    function showDonut(div, data, options={}){
        $("#"+div+ " g").remove();
          const svg = d3.select("#"+div)
          
            .attr("width", width)
            .attr("height", height)
            .append("g")
            .attr("transform", `translate(${width / 2}, ${height / 2})`);
        
        


          const color = d3.scaleOrdinal(d3.schemeBlues[data.length + 1]);
        
          const pie = d3.pie()
            .value(d => d.value)
            .sort(null);
        
          const arc = d3.arc()
            .innerRadius(radius * 0.6)
            .outerRadius(radius * 0.9);
        
          const arcs = svg.selectAll("arc")
            .data(pie(data))
            .enter()
            .append("g");
        
          arcs.append("path")
            .attr("d", arc)
            .attr("fill", (d, i) => color(i))
            .on("click", (event, d) => {
                if(options['callback']){
                    options['callback'](div, options['col'], d.data.label)
                }
            })
            .transition()
            .duration(1000)
            .attrTween("d", function(d) {
              const c4_interp = d3.interpolate(
                { startAngle: 0, endAngle: 0 },
                d
              );
              return function(t) {
                return arc(c4_interp(t));
              };
            });
            
        
          arcs.append("text")
            .attr("transform", d => `translate(${arc.centroid(d)})`)
            .attr("text-anchor", "middle")
            .text(d => d.data.label);
    }
    
    function showBar(div, data, options={}){
     
   

    if(options['sort']){
        data.sort((a, b) => b.value - a.value)
    }

    if(options['limit']){
        data = data.slice(0, options['limit']); 
    }

    // Clean up labels (replace null or empty string with "Unknown")
    data.forEach(d => {
    if (!d.label||d.label=='') {
        d.label = "Unknown";
    }
    });
  console.log(data)

   color_pattern = d3.scaleOrdinal()
    .domain(data.map(d => d.label))
    .range(["#4CAF50", "#2196F3", "#FFC107", "#FF5722", "#9C27B0"]);

const colors = d3.schemePurples[9]; // or any number up to 9
const color_gradient = d3.scaleOrdinal()
  .domain(data.map(d => d.label))
  .range(data.map((_, i) => colors[i % colors.length]));


  $("#"+div+ " g").remove();

   svg = d3.select("#"+div);
   width = +svg.attr("width");
   height = +svg.attr("height");
   margin = { top: 20, right: 20, bottom: 30, left: 40 };
   chartWidth = width - margin.left - margin.right;
   chartHeight = height - margin.top - margin.bottom;


 x = d3.scaleBand()
  .domain(data.map(d => d.label))
  .range([0, width])
  .padding(0.6); // more spacing 
    
   y = d3.scaleLinear()
    .domain([0, d3.max(data, d => d.value)])
    .nice()
    .range([chartHeight, 0]);

   chart = svg.append("g")
    .attr("transform", `translate(${margin.left},${margin.top})`);

  // X Axis
  chart.append("g")
    .attr("transform", `translate(0,${chartHeight})`)
    .call(d3.axisBottom(x));

  // Y Axis
  chart.append("g")
    .call(d3.axisLeft(y));
    
  fill = 'orange'


  if(options['fill']=='gradient')
    fill =  d => color_gradient(d.label)      
  else
  if(options['fill']=='pattern')
    fill =  d => color_pattern(d.label)      
  else
  if(options['fill'])
    fill = options['fill']
      
  // Bars with animation
  bar = chart.selectAll(".bar")
    .data(data)
    .enter().append("rect")
    .attr("class", "bar")
    .attr("fill", fill)
    .attr("x", d => x(d.label))
    .attr("y", chartHeight)         // start at bottom
    .attr("width", x.bandwidth())
    .attr("height", 0)              // height = 0 initially
    .on("click", (event, d) => {
        if(options['callback']){
            options['callback'](div, options['col'], d.key )
        }
    })
    .transition()
    .duration(1000)
    .delay((d, i) => i * 100)
    .attr("y", d => y(d.value))
    .attr("height", d => chartHeight - y(d.value))
   

  // Value labels
  chart.selectAll(".label")
    .data(data)
    .enter()
    .append("text")
    .attr("class", "label")
    .attr("x", d => x(d.label) + x.bandwidth() / 2)
    .attr("y", chartHeight)
    .text(d => d.value)
    .transition()
    .duration(1000)
    .delay((d, i) => i * 100)
    .attr("y", d => y(d.value) - 5);
    }
    
</script>