<%= inline(this,:'_init')  %>
<%= inline(this,:'_style')  %>
<%= inline(this,:'../lib/_map')  %>
<%= inline(this,:'_map')  %>
    <script src="https://cdn.tailwindcss.com"></script>
	<link rel="stylesheet" href="/rocker/assets/plugins/notifications/css/lobibox.min.css" />
    <script src="/rocker/assets/plugins/notifications/js/lobibox.min.js"></script>
    <script src="/rocker/assets/plugins/notifications/js/notifications.min.js"></script>

	<%


	cases = EMSCase.where(:status=>{'$in'=>['New', 'Schedule']}, '$or'=>[{:request_at=>{'$gte'=>Time.now-76800}},{:schedule_from=>{'$lte'=>Time.now+76800,'$gte'=>Time.now-76800}}]).sort(:case_no=>-1).all()

	# cases = EMSCase.where(:status=>{'$in'=>["New","Pending"]}, :user_id=>@current_user.id).sort(:case_no=>-1).all()
	cases_count = EMSCase.where( :user_id=>@current_user.id).count()


	session.delete :case_id
	a = Time.now.beginning_of_month

	monthly_cases = EMSCase.where(:created_at=>{'$gte'=>a}).count


	%>

<style>
	.card-x{

/*		height:8vh*/
			 }
			 
			 
		 	.marker-position {
		 	    bottom: -40px;
		 	    left: 0;
		 	    position: relative;
		 	}
			 
		 	.marker-position-2 {
		 	    bottom: -10px;
		 	    left: 0;
		 	    position: relative;
		 	}
			
</style>

<link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />

<!-- แถวหัวข้อและแถบค้นหา -->

<div class="row ">
<div class="col-12 ">

<div class="row row-cols-1 row-cols-md-4 row-cols-xl-4 d-flex align-items-stretch gx-lg-3 gy-lg-3 gx-sm-0  gy-sm-0">

	<div class="col-6 col-xl-2 hidden-lg-down  p-sm-1"  >
		<div class="card radius-10 border-start border-0 border-3 card-x mb-sm-2">
		<div class="card-body">
			<div class="d-flex align-items-center">
				<div>
					<h4 class="my-1 text-danger"><%= monthly_cases %> Cases</h4>
					<p class="mb-0 font-13">Monthly cases</p>
				</div>
				<div class="widgets-icons-2 rounded-circle bg-gradient-bloody text-white ms-auto"><i class="bx bx-unite"></i>
				</div>
			</div>
		</div>
		</div>
    </div>
	<div class="col-6 col-xl-2 hidden-lg-down p-sm-1">
		<div class="card radius-10 border-start border-0 border-3  card-x mb-sm-2">
		<div class="card-body">
			<div class="d-flex align-items-center">
				<div>
					<h4 class="my-1 text-warning">- mins</h4>
					<p class="mb-0 font-13">Avg response time </p>
				</div>
				<div class="widgets-icons-2 rounded-circle bg-gradient-blooker text-white ms-auto"><i class="bx bx-alarm-snooze"></i>
				</div>
			</div>
		</div>
		</div>
    </div>
	<div class="col-12 col-xl-4 p-sm-1">
		<div class="card radius-10 border-start border-0 border-3  card-x mb-sm-2">
		<div class="card-body">
		<div class=" d-flex align-items-center">
				
		 <div style="border:0px solid" class="col-10 ">
			<div class="row d-flex justify-content-between">		
			<span class="col-9" style="" >		
					<input name='record[location]' id="record_location" value=""  class="form-control  " type="text" placeholder="Address.." >
			
					<input name='record[latlng]' id="record_latlng"  value=""  class="form-control  " type="text" placeholder="Location.." style="display:none" >
			</span>
			<span class="col-3 d-flex justify-content-start" style="border:0px solid " >
	            <button id="start" class="btn btn-info">พูด</button>
	            <button id="stop" class="btn btn-danger rounded-lg shadow-md hover:bg-red-600 transition hidden">หยุด</button>
	            <button id="reset" class="btn btn-warning  rounded-lg shadow-md hover:bg-gray-600 transition hidden">Reset</button>
				
				<!-- <a href="#" class="btn btn-info btn-sm" id="select-code" data-bs-toggle="modal" data-bs-target="#selectCodeModal">พูด</a> -->
			</span>
				    </div>
			</div>
				
				
			   						    <script>
										    let recognition;

										           function initializeRecognition() {
										               if (recognition) {
										                   recognition.abort(); // Stop and reset any previous instance
										               }

										               window.SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
										               recognition = new SpeechRecognition();

										               // Speech Recognition Settings
										               recognition.continuous = true;
										               recognition.interimResults = true;
										               recognition.lang = 'th-EN'; // Supports both Thai & English

										               // Event Listeners
										               recognition.onresult = (event) => {
										                   let transcript = '';
										                   for (let i = 0; i < event.results.length; i++) {
										                       transcript += event.results[i][0].transcript;
										                   }
										                   document.getElementById("output").innerText = transcript;
										               };

										               recognition.onerror = (event) => {
										                   console.error("Speech Recognition Error:", event.error);
										                   document.getElementById("status").innerText = "Error: " + event.error;
										                   document.getElementById("status").classList.remove("text-green-500");
										                   document.getElementById("start").classList.remove("hidden");
										                   document.getElementById("stop").classList.add("hidden");
										               };
										           }

										           // Initialize SpeechRecognition on Page Load
										           initializeRecognition();
			   						     
			   						        const output = document.getElementById("record_location");
			   						        const startBtn = document.getElementById("start");
			   						        const stopBtn = document.getElementById("stop");
			   						        // const status = document.getElementById("status");
									        const resetBtn = document.getElementById("reset");

			   						        // Start Listening
			   						        startBtn.addEventListener("click", (e) => {
			   						            recognition.start();
			   						            // status.innerText = "Listening (English & Thai)...";
           // 			   						            status.classList.add("text-green-500");
			   						            startBtn.classList.add("hidden");
			   						            stopBtn.classList.remove("hidden");
			   									e.preventDefault();
			   						        });

			   						        // Stop Listening
			   						        stopBtn.addEventListener("click", (e) => {
			   						            recognition.stop();
			   						            // status.innerText = "Stopped Listening";
		            // 			   						            status.classList.remove("text-green-500");
			   						            startBtn.classList.remove("hidden");
			   						            stopBtn.classList.add("hidden");
			   									e.preventDefault();
			   						        });

		   						        // Reset Text
		    						        resetBtn.addEventListener("click", () => {
		    						            $('#record_location').val("")
											    recognition.abort(); // Stop Recognition
											               initializeRecognition(); // Re-initializ
												
		    						        });

			   						        // Append Recognized Speech
			   						        recognition.onresult = (event) => {
			   						            let transcript = '';
			   						            for (let i = 0; i < event.results.length; i++) {
			   						                transcript += event.results[i][0].transcript;
			   						            }
												console.log(transcript)
			   						            // output.innerText = transcript;
												$('#record_location').val(transcript)
												address_search(event)
												
			   						        };

			   						        // Handle Errors
			   						        recognition.onerror = (event) => {
			   						            console.error("Speech Recognition Error:", event.error);
			   						            // status.innerText = "Error: " + event.error;
            // 			   						            status.classList.remove("text-green-500");
			   						            startBtn.classList.remove("hidden");
			   						            stopBtn.classList.add("hidden");
			   						        };
			   						    </script>
							
							
				
				
				<div class="widgets-icons-2 rounded-circle bg-gradient-ohhappiness  text-white ms-auto">
					<i id="create-btn" class="bx bx-map"></i>
			<script>
		
			</script>
				</div>
			</div>
		</div>
		</div>
    </div>
	<div class="col-6 col-xl-2 p-sm-1">
		<div class="card radius-10 border-start border-0 border-3  card-x mb-sm-2">
		<div class="card-body">
			<div class="d-flex align-items-center">
				<div>
					<h4 class="my-1 text-info"> <%=cases.size %> / <%=cases_count%></h4>
					<p class="mb-0 font-13">--% from last week</p>
				</div>
				<div class="widgets-icons-2 rounded-circle bg-gradient-scooter text-white ms-auto"><i class="bx bx-table"></i>
				</div>
			</div>
		</div>
		</div>
    </div>
	<div class="col-6 col-xl-2 p-sm-1">
		<div class="card radius-10 border-start border-0 border-3  card-x mb-sm-2">
		<div class="card-body">
			<div class="d-flex align-items-between justify-content-between">
				<div style="">
					<h4 class="my-1 text-info">Active</h4>
					<p class="mb-0 font-13">EMD : <%= @current_user.login %></p>
				</div>
				<div class="form-check form-switch" style="">
					<input class="form-check-input" type="checkbox" id="flexSwitchCheckChecked" <%= ' checked=""' if @current_user.status=='Active' %> style="font-size:4vh">
					<label class="form-check-label" for="flexSwitchCheckChecked"></label>
				</div>
				

		</div>
		</div>
		</div>
    </div>


</div>



<div class="row gx-0 gy-0">
	<div class="col-12">
    <div class="card radius-10">
	<div class="card-body">
	<div id="dashboard-map" class="" style="height:70vh">
		map
	</div>
	</div>
	</div>
	</div>

	<div class="col" style="display:none">

	    <div class="card radius-10">
		<div class="card-body">
			events
		<div class="message-partial" style="height:60vh;overflow:scroll"></div>
		</div>
		</div>
	</div>

</div>


<div class="row row-cols-1 row-cols-md-4 row-cols-xl-4">



	<% for i in cases
	  cls = ""
		code = i.init_code
		cls = code.get_class if code
	%>



	<div class="col">
		<a href="show?id=<%=i.id%>">
		<div class="card radius-10 border-start border-0 border-3 border-<%= code.get_class if code  %>">
		<div class="card-body">
			<div class="d-flex align-items-center">
				<div>
					<h4 class="my-1 text-<%=cls%> "><%=i.case_no%></h4>
					<p class="mb-0 text-secondary">ผู้ป่วย : <%=i.patient_name%></p>
					<p class="mb-0 font-13">Code : <%= code.code  if code%> </p>
					<p class="mb-0 text-secondary">อาการ : <%=i.chief_complain[0..20]%></p>


				</div>
				<!-- <div class="widgets-icons-2 rounded-circle bg-gradient-bloody text-white ms-auto"><i class='bx bxs-group'></i>
				</div> -->
			</div>
		</div>
		</div>
	</a>
	</div>
	<% end %>

</div>


</div >
<div class="msg text-success" style="">
</div>

<script>
	function img_default_noti() {
		Lobibox.notify('success', {
			pauseDelayOnHover: false,
			continueDelayOnInactiveTab: true,
			delay: 10000,
			sound: true,
			soundPath: '/esm-miot-monitor/ems/click.wav',
			position: 'top right',
			icon: 'bx bx-check-circle',
			// img: '/rocker/assets/plugins/notifications/img/5.jpg', //path to image
			msg: 'New Request.'
		});
	}
	<%
	pending_cases = EMSCase.where(:user_id=>@current_user.id, :status=>'Pending').first
	if pending_cases
	%>
	img_default_noti();
	<% end %>
</script>



	<script>

		var local_map;

		var latlngbounds;
		
		var pos ;
		
		var map1;
		
			
		function beforeInit(){
		
			
			<%
				latlng = Setting.get('aoc_center').split(",")
			%>
			latlng = <%=latlng.to_json%>



			map1 = new EMSMap('dashboard-map',{movable:true});
			map1.setPosition(latlng[0], latlng[1])

			map1.setMarkerPosition(latlng[0], latlng[1])


			
			

			$('#create-btn').click(function(){
				loc = $('#record_location').val()
				zoom = map1.getMap().getZoom()
				latlng = ""+pos.lat()+","+pos.lng()
				
				window.location = "create?location="+loc+"&latlng="+latlng+"&zoom="+zoom
				
			})



			map1.changeMarkerPosition(function(marker){



					pos = marker.position
		
						
						
						$('#record_latlng').val(""+pos.lat()+","+pos.lng());
					

					if(map1.getMap().getZoom()<18)
					map1.getMap().setZoom(18);
					
		

			}.bind(this))
		}
		
    
    function simpleDistance(lat1, lon1, lat2, lon2) {
        const toRadians = (degrees) => degrees * Math.PI / 180;
    
        // Approximate radius of Earth in kilometers at the equator
        const R = 6371;

        // Convert latitude and longitude from degrees to radians
        lat1 = toRadians(lat1);
        lon1 = toRadians(lon1);
        lat2 = toRadians(lat2);
        lon2 = toRadians(lon2);

        // Differences in coordinates
        const dLat = lat2 - lat1;
        const dLon = lon2 - lon1;

        // Simplified distance calculation
        const distance = Math.sqrt(dLat * dLat + dLon * dLon) * R;
        return distance;
    }


		
		function afterInit(){
			<% if Setting.get("google_kml") and Setting.get("google_kml") !="" %>
			var kmlLayer = new google.maps.KmlLayer({
        	url: '<%=Setting.get("google_kml")%>',
        	map: map1.getMap(),
			clickable: false,
			preserveViewport: true 
      		});
			<% end %>

			clatlng = [13.68313508354787, 100.69198345629769]
			<% if Setting.get("aoc_center") %>
			clatlng = [<%=Setting.get("aoc_center")%>]
			<% end %>

			local_map = map1.getMap()
	



			<%

			#cases = EMSCase.where(:status=>"New").sort(:case_no=>-1).all()

			%>

			var latlng = [];
			
			const station_image_img = document.createElement('img');
			station_image_img.src = "<%=url_for("ems/station.png")%>";

			var pos = new google.maps.LatLng(clatlng[0],clatlng[1] )
			latlng.push(new google.maps.LatLng(pos))
			marker = new google.maps.Marker({position: pos, map: local_map, content: station_image_img})

			<% for i in cases 
				
				text = i.case_no
			
				text = "#{i.init_code.code if i.init_code} #{i.location}" if i.location

				cls_menus = %w{red orange green}
				menus = %w{EMS Refer Service}

				cls = cls_menus[menus.index(i.case_type)] 

			
			%>
		    latlng.push(new google.maps.LatLng(<%=i.latlng%>))

			var pos = new google.maps.LatLng(<%=i.latlng%> )
			marker = new google.maps.Marker({position: pos, map: local_map, case_id:'<%=i.case_no%>',label:{
							fontSize: '20px',
							color: '<%=cls%>',
							text: "<%= text %>",
							className: 'marker-position-2',
							
						},
						 icon: {
        path: google.maps.SymbolPath.BACKWARD_CLOSED_ARROW, // Change to MARKER if needed
        fillColor: '<%=cls%>', // Set your color dynamically
        fillOpacity: 1,
        strokeColor: 'black',
        strokeWeight: 2,
        scale: 8 // Adjust size if needed
    }})

			infowindow = new google.maps.InfoWindow({
			content: "<%=i.case_no%>",
			});

			marker.addListener("click", () => {


    	    infowindow.open(marker.get("map"));

			});
			
		    <% end %>
			
			<%
			ambus = Ambulance.where(:zone_id=>@current_zone.id).all
			
			%>
			<% for i in ambus 
			
			if i.last_location and i.last_location!="" and i.last_location.index(",")
			%>
      <%
            
            device = EMSDevice.where(:name=>i.device_no).first
            if device
              
            points = []
              
            logs =  EMSDeviceLog.where(:device_id=>device.id).order_by(_id: :desc).limit(100)
            
            for log in logs.reverse 
                
              points += log.data
              
            end
      %>
            points = <%=points.to_json%>
            
            for (var i = 0; i < points.length - 1; i++) {
              
              
              dis = simpleDistance(points[i].lat, points[i].lng, points[i+1].lat, points[i+1].lng);
                
              if(Math.abs(points[i].ts-points[i + 1].ts)<10&&dis<1){
              
                 var color = getColorForSpeed(points[i].spd);
                 var pathSegment = new google.maps.Polyline({
                   path: [points[i], points[i + 1]],
                   geodesic: true,
                   strokeColor: color,
                   strokeOpacity: 1.0,
                   strokeWeight: 4,
                   map: local_map
                 });
                 
                 }
              
               }
               var color = 'red' ;//getColorForSpeed(points[points.length-1].spd);
              
             //  var pathSegment = new google.maps.Polyline({
              //   path: [points[points.length-1], {'lat':<%=i.last_location.split(",")[0]%>,'lng':<%=i.last_location.split(",")[1]%>}],
              //   geodesic: true,
            //     strokeColor: color,
            //     strokeOpacity: 1.0,
            //     strokeWeight: 4,
            //     map: local_map
            //   });
   
      
      <% end %>
		    latlng.push(new google.maps.LatLng(<%=i.last_location%>))
			 <% end %>
			 <% end %>


			latlngbounds = new google.maps.LatLngBounds();
			for (var i = 0; i < latlng.length; i++) {
			    latlngbounds.extend(latlng[i]);
			}
			
		
			
			local_map.fitBounds(latlngbounds);   
			
			
			if(local_map.getZoom()<15)
			  local_map.setZoom(15);
			
		


				<%
							hospitals = EMSHospital.all()
				%>

				<% for i in hospitals %>

				var posx = new google.maps.LatLng(<%=i.latlng%> )
				var image = "<%=url_for("ems/h#{i.level}.png")%>";
				 markerx = new google.maps.Marker({position: posx, map: local_map,
					 icon:image
				 })
				 markerx.addListener("click", () => {
				 });


				<% end %>







	    }






	

    var car = "M17.402,0H5.643C2.526,0,0,3.467,0,6.584v34.804c0,3.116,2.526,5.644,5.643,5.644h11.759c3.116,0,5.644-2.527,5.644-5.644 V6.584C23.044,3.467,20.518,0,17.402,0z M22.057,14.188v11.665l-2.729,0.351v-4.806L22.057,14.188z M20.625,10.773 c-1.016,3.9-2.219,8.51-2.219,8.51H4.638l-2.222-8.51C2.417,10.773,11.3,7.755,20.625,10.773z M3.748,21.713v4.492l-2.73-0.349 V14.502L3.748,21.713z M1.018,37.938V27.579l2.73,0.343v8.196L1.018,37.938z M2.575,40.882l2.218-3.336h13.771l2.219,3.336H2.575z M19.328,35.805v-7.872l2.729-0.355v10.048L19.328,35.805z";


		var ambu_map = {}


	


		$('#record_location').keydown(function(e){

			if(e.keyCode == 13) {
				e.preventDefault()

				address_search(e)

					return false;
				}
		});


		// $('#record_location').change(address_search);



		
		setMapInitCallback(beforeInit,afterInit);
    
   
	
		function update(lines){



			obj = JSON.parse(lines[1])
			console.log(obj)

			// console.log(obj['ambu_data'])


			if(obj['ambu_data']){

			var keys = Object.keys(obj['ambu_data']);

			var values = keys.map(function(v) { return obj['ambu_data'][v]; });



			for(ai in values){

				a = values[ai]

				if(a['last_location']!=""&&a['last_location'].indexOf(",")){



				map_icon = {
				  path: car,
				  scale: 0.9,
				  strokeColor: 'white',
				  strokeWeight: .10,
				  fillOpacity: 1,
				  fillColor: '#303bef',
				  offset: '5%',
				// size: new google.maps.Size(sizeX, sizeY),
//         				origin: new google.maps.Point(0, 0),
//         				anchor: new google.maps.Point(sizeX/2, sizeY/2),
				  // rotation: parseInt(heading[i]),
				  anchor: new google.maps.Point(10, 25) // orig 10,50 back of car, 10,0 front of car, 10,25 center of car
				};



				var t = a['last_location'].split(",")
				var pos = new google.maps.LatLng(parseFloat(t[0]), parseFloat(t[1]))

        		marker = ambu_map[a['_id']]

				var image = "<%=url_for("ems/ambu.png")%>";

    

				if(marker==null){


						marker_map = new google.maps.Marker({position: pos,icon: image,  map: local_map,label:{
							fontSize: '20px',
							text: a['name'],
							className: 'marker-position',
							
						}});
						ambu_map[a['_id']] = marker_map
							// console.log('new')


				}else{
						marker_map = 	ambu_map[a['_id']]
            
            var color = getColorForSpeed(60);
            
            var pathSegment = new google.maps.Polyline({
              path: [pos, marker_map.getPosition()],
              geodesic: true,
              strokeColor: color,
              strokeOpacity: 1.0,
              strokeWeight: 4,
              map: local_map
            });
            
            
            
						marker_map.setPosition(pos)
            
            
						// console.log('set')

				}

				}



				// latlngbounds.extend(pos);

			}



			if(obj['emd']!=null){

				console.log(obj['emd'])

			}

		}

		}


		function address_search(e){


				var address = $('#record_location').val()
			
				map1.geocode({'address':address},function(result){
					console.log('xxx')
					// $('#record_address').val(result.formatted_address)

					var pos = result.geometry.location;

					// map1.setPosition(pos.lat(), pos.lng())
					map1.setPosition(pos.lat, pos.lng)

					if(map1.getMap().getZoom()<15)
					map1.getMap().setZoom(15);
					map1.setMarkerPosition(pos.lat, pos.lng, false)


				})

				e.preventDefault();
				return false;

		}



		function reload_message(){



		$.ajax({
		  url: "<%= "../EmsParamedic/message_partial?zone_id=#{@current_zone.id}"%>&di=reverse",
		  context: document.body
		}).done(function(data) {
		  $( '.message-partial' ).html(data);
	  	 // alert($( '.chat' ).height())
	   $('.panel-body').scrollTop(100000000)


		});

		}
		
		

		
		

		// reload_message()


	</script>
<span class="material-symbols-outlined">
airport_shuttle
</span>

<%=init_map%>

<script>

  var ws 


  function onopen(event){

	show('websocket opened');
  	ws.send('WS.Select name=<%=session.id%>\n["Zone <%="miot/#{@context.settings.name}/z/#{@current_zone.name}"%>","ZoneUpdate zone_id=*","EMSUpdate event_id=*", "Alert station_id=*","Data.Image station_id=*"]')

  }

  function onclose(event){
	show('websocket closed, reconnect in 2 sec');

 	setTimeout(function () {
		ws.close();
       //window.location.href = "index"; //will redirect to your blog page (an ex: blog.html)
		//reconnect();
    }, 2000); //will call the function after ถ secs.

  }

 function onerror(event) {
	show('websocket error, reconnect in 5 sec');

    console.error("WebSocket error:", event);
		setTimeout(function () {
    	//window.location.href = "index"; //will redirect to your blog page (an ex: blog.html)
		reconnect();
    }, 5000);
 };

  function onmessage(m) {



	    $('.msg').html("Network is online : "+(m.timeStamp/1000)+ " s" )


		lines = m.data.split("\n")

		if(lines[0].split(" ")[0]=='Zone.Refresh'){
	
					window.location.reload();

		

		}else
		if(lines[0].split(" ")[0]=='Zone.Message'){

			reload_message()

		}else

		if(lines[0].split(" ")[0]=='ZoneUpdate'){
			if(local_map!=null)
			update(lines)


		}
  }


 function reconnect(){
		
	ws  = new WebSocket('wss://' + window.location.host + "/ws/<%=@context.settings.name%>/Home/index");
	ws.onopen = onopen;
	ws.onclose = onclose;
	ws.onmessage = onmessage;
	ws.onerror = onerror;
	
	show('websocket reconnect');

  }	


  tag = 'wss://' + window.location.host + "/ws/<%=@context.settings.name%>/Home/index";





  var active_dispatch = 'Active' ;


  function check_dispatch(){



	status = 'Active'

	if(active_dispatch==false)status= "InActive"

  	ws.send("EMD.Update name=<%=@current_user.id %>\n{\"user_id\":\"<%=@current_user.id%>\",\"zone_name\":\"<%=@current_zone.name%>\", \"zone_id\":\"<%=@current_zone.id%>\",\"status\":\""+status+"\"}")
	


  }

   $('#flexSwitchCheckChecked').change(function() {
        if(this.checked) {
            var returnVal = true;
            $(this).prop("checked", returnVal);
        }
       active_dispatch = this.checked
		 check_dispatch()
    });

reconnect();

</script>

<div class="row">
<div class="col-3">
<a href="index_msg" class="btn btn-info">MSG</a>

</div>
</div>

<br/>
<br/>
<br/>
<br/>


</div>





