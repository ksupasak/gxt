<%= inline(this,:'_init')  %>
<%= inline(this,:'_style')  %>
<%= inline(this,:'../lib/_map')  %>
<%= inline(this,:'_map')  %>
<script src="https://cdn.tailwindcss.com"></script>
<link rel="stylesheet" href="/rocker/assets/plugins/notifications/css/lobibox.min.css" />
<script src="/rocker/assets/plugins/notifications/js/lobibox.min.js"></script>
<script src="/rocker/assets/plugins/notifications/js/notifications.min.js"></script>
<link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />

<input id="record_latlng" type="text" name="record_latlng"/>

	<%


	cases = EMSCase.where(:status=>{'$in'=>['New', 'Schedule']}, '$or'=>[{:request_at=>{'$gte'=>Time.now-76800}},{:schedule_from=>{'$lte'=>Time.now+76800,'$gte'=>Time.now-76800}}]).sort(:case_no=>-1).all()

	# cases = EMSCase.where(:status=>{'$in'=>["New","Pending"]}, :user_id=>@current_user.id).sort(:case_no=>-1).all()
	cases_count = EMSCase.where( :user_id=>@current_user.id).count()


	session.delete :case_id
	a = Time.now.beginning_of_month

	monthly_cases = EMSCase.where(:created_at=>{'$gte'=>a}).count


	%>
<div class="col-12">
    <div class="card radius-10">
	<div class="card-body">
	<div id="dashboard-map" class="" style="height:70vh">
		map
	</div>
	</div>
	</div>
	</div>
<script>

		var local_map;

		var latlngbounds;
		
		var pos ;
		
		var map1;
		
			
		function beforeInit(){
		
			
			<%
				latlng = Setting.get('aoc_center').split(",")
			%>

			latlng = <%=latlng.to_json%>

			map1 = new EMSMap('dashboard-map',{movable:true});
			map1.setPosition(latlng[0], latlng[1])
			map1.setMarkerPosition(latlng[0], latlng[1])
			

			map1.changeMarkerPosition(function(marker){

        			pos = marker.position
					$('#record_latlng').val(""+pos.lat()+","+pos.lng());
					if(map1.getMap().getZoom()<18)
					map1.getMap().setZoom(18);

                    dis =  simpleDistance(latlng[0],latlng[1],pos.lat(),pos.lng())

                    $('#record_latlng').val(""+dis);

		
			}.bind(this))
		}
		
    
  


		
		function afterInit(){

			<% if Setting.get("google_kml") and Setting.get("google_kml") !="" %>
			
            renderKML(map1.getMap(), '<%=Setting.get("google_kml")%>')

			<% end %>

			clatlng = [13.68313508354787, 100.69198345629769]
			<% if Setting.get("aoc_center") %>
			clatlng = [<%=Setting.get("aoc_center")%>]
			<% end %>

			local_map = map1.getMap()
	
			var latlng = [];
			
			const station_image_img = document.createElement('img');
			station_image_img.src = "<%=url_for("ems/station.png")%>";

			var pos = new google.maps.LatLng(clatlng[0],clatlng[1] )
			latlng.push(new google.maps.LatLng(pos))
			marker = new google.maps.Marker({position: pos, map: local_map, content: station_image_img})

			<% for i in cases 
				
				text = i.case_no
			
				text = "#{i.init_code.code if i.init_code} #{i.location}" if i.location

				cls_menus = %w{red orange green}
				menus = %w{EMS Refer Service}

				cls = cls_menus[menus.index(i.case_type)] 

			
			%>

		    latlng.push(new google.maps.LatLng(<%=i.latlng%>))
			var pos = new google.maps.LatLng(<%=i.latlng%> )
			marker = new google.maps.Marker({position: pos, map: local_map, case_id:'<%=i.case_no%>',label:{
							fontSize: '20px',
							color: '<%=cls%>',
							text: "<%= text %>",
							className: 'marker-position',
						},
						 icon: {
                            path: google.maps.SymbolPath.BACKWARD_CLOSED_ARROW, // Change to MARKER if needed
                            fillColor: '<%=cls%>', // Set your color dynamically
                            fillOpacity: 1,
                            strokeColor: 'black',
                            strokeWeight: 2,
                            scale: 10 // Adjust size if needed
                        }})

			infowindow = new google.maps.InfoWindow({
			    content: "<%=i.case_no%>",
                position: { lat: pos.lat(), lng: pos.lng() },
			});

			marker.addListener("click", () => {
    	    infowindow.open(marker.get("map"));

			});
			
		    <% end %>
			
			<%
			
            ambus = Ambulance.where(:zone_id=>@current_zone.id).all
			
            for i in ambus 
			
			if i.last_location and i.last_location!="" and i.last_location.index(",")
			
                device = EMSDevice.where(:name=>i.device_no).first
            
            if device
              
                points = []
                
                logs =  EMSDeviceLog.where(:device_id=>device.id).order_by(_id: :desc).limit(100)
                
                for log in logs.reverse 
                    
                points += log.data
                
                end
      %>
            points = <%=points.to_json%>
            
            for (var i = 0; i < points.length - 1; i++) {
              
              dis = simpleDistance(points[i].lat, points[i].lng, points[i+1].lat, points[i+1].lng);
                
              if(Math.abs(points[i].ts-points[i + 1].ts)<10&&dis<1){
              
                 var color = getColorForSpeed(points[i].spd);
                 var pathSegment = new google.maps.Polyline({
                   path: [points[i], points[i + 1]],
                   geodesic: true,
                   strokeColor: color,
                   strokeOpacity: 1.0,
                   strokeWeight: 4,
                   map: local_map
                 });
                 
                 }
              
               }
               var color = 'red' ;
   
      
          <% end %>

		    latlng.push(new google.maps.LatLng(<%=i.last_location%>))
			
             <% end %>
			 <% end %>


			latlngbounds = new google.maps.LatLngBounds();

			for (var i = 0; i < latlng.length; i++) {
			    latlngbounds.extend(latlng[i]);
			}
			
			local_map.fitBounds(latlngbounds);   
			
			
			if(local_map.getZoom()<15)
			  local_map.setZoom(15);
			
		


			<%
			hospitals = EMSHospital.all()
			%>
            <% for i in hospitals %>

				var posx = new google.maps.LatLng(<%=i.latlng%> )
				var image = "<%=url_for("ems/h#{i.level}.png")%>";
				 markerx = new google.maps.Marker({position: posx, map: local_map,
					 icon:image
				 })
				 markerx.addListener("click", () => {

				 });

			<% end %>

	    }


   

	
		$('#record_location').keydown(function(e){

			if(e.keyCode == 13) {
				e.preventDefault()

				address_search(e)

					return false;
				}
		});

		
		setMapInitCallback(beforeInit,afterInit);
    
   	    var ambu_map = {}


		function update(lines){



			obj = JSON.parse(lines[1])
			console.log(obj)

			if(obj['ambu_data']){

			var keys = Object.keys(obj['ambu_data']);

			var values = keys.map(function(v) { return obj['ambu_data'][v]; });

			for(ai in values){

				a = values[ai]

				if(a['last_location']!=""&&a['last_location'].indexOf(",")){


			var t = a['last_location'].split(",")
			var pos = new google.maps.LatLng(parseFloat(t[0]), parseFloat(t[1]))

        	marker = ambu_map[a['_id']]

			var image = "<%=url_for("ems/ambu.png")%>";


			if(marker==null){  // if new ambualance

                marker_map = new google.maps.Marker({position: pos,icon: image,  map: local_map,label:{
                    fontSize: '20px',
                    text: a['name'],
                    className: 'marker-position',
                    
                }});
                ambu_map[a['_id']] = marker_map
                


			}else{

                marker_map = 	ambu_map[a['_id']]
            
                var color = getColorForSpeed(60);
                
                var pathSegment = new google.maps.Polyline({
                path: [pos, marker_map.getPosition()],
                geodesic: true,
                strokeColor: color,
                strokeOpacity: 1.0,
                strokeWeight: 4,
                map: local_map
                });
                marker_map.setPosition(pos)
                      

			}

			}

			}

			if(obj['emd']!=null){
			    console.log(obj['emd'])
			}

		}

		}


		function address_search(e){


				var address = $('#record_location').val()
			
				map1.geocode({'address':address},function(result){
			
					// $('#record_address').val(result.formatted_address)
					var pos = result.geometry.location;

					// map1.setPosition(pos.lat(), pos.lng())
					map1.setPosition(pos.lat, pos.lng)
					if(map1.getMap().getZoom()<15)
					map1.getMap().setZoom(15);
					map1.setMarkerPosition(pos.lat, pos.lng, false)
				})

				e.preventDefault();
				return false;

		}



		function reload_message(){

            $.ajax({
                url: "<%= "../EmsParamedic/message_partial?zone_id=#{@current_zone.id}"%>&di=reverse",
                context: document.body
                }).done(function(data) {
                $( '.message-partial' ).html(data);
                $('.panel-body').scrollTop(100000000)
		    });

		}
		

	</script>


<%=init_map%>


<script>

  var ws 

  function onopen(event){

	show('websocket opened');
  	ws.send('WS.Select name=<%=session.id%>\n["Zone <%="miot/#{@context.settings.name}/z/#{@current_zone.name}"%>","ZoneUpdate zone_id=*","EMSUpdate event_id=*", "Alert station_id=*","Data.Image station_id=*"]')

  }

  function onclose(event){
	show('websocket closed, reconnect in 2 sec');

 	setTimeout(function () {
		ws.close();
    }, 2000); 

  }

 function onerror(event) {
	show('websocket error, reconnect in 5 sec');

    console.error("WebSocket error:", event);
		setTimeout(function () {
		reconnect();
    }, 5000);
 };

  function onmessage(m) {

	    $('.msg').html("Network is online : "+(m.timeStamp/1000)+ " s" )
		lines = m.data.split("\n")
		if(lines[0].split(" ")[0]=='Zone.Refresh'){
					window.location.reload();
		}else
		if(lines[0].split(" ")[0]=='Zone.Message'){

			reload_message()

		}else

		if(lines[0].split(" ")[0]=='ZoneUpdate'){
			if(local_map!=null)
			update(lines)


		}
  }


 function reconnect(){
		
	ws  = new WebSocket('wss://' + window.location.host + "/ws/<%=@context.settings.name%>/Home/index");
	ws.onopen = onopen;
	ws.onclose = onclose;
	ws.onmessage = onmessage;
	ws.onerror = onerror;
	
	show('websocket reconnect');

  }	


  tag = 'wss://' + window.location.host + "/ws/<%=@context.settings.name%>/Home/index";





  var active_dispatch = 'Active' ;


  function check_dispatch(){



	status = 'Active'

	if(active_dispatch==false)status= "InActive"

  	ws.send("EMD.Update name=<%=@current_user.id %>\n{\"user_id\":\"<%=@current_user.id%>\",\"zone_name\":\"<%=@current_zone.name%>\", \"zone_id\":\"<%=@current_zone.id%>\",\"status\":\""+status+"\"}")
	


  }

   $('#flexSwitchCheckChecked').change(function() {
        if(this.checked) {
            var returnVal = true;
            $(this).prop("checked", returnVal);
        }
       active_dispatch = this.checked
		 check_dispatch()
    });

reconnect();

</script>

<div class="msg text-success" style="">
</div>


