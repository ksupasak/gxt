<%
	
date = Time.now
months = %w{มกราคม กุมภาพันธ์ มีนาคม เมษายน พฤษภาคม มิถุนายน กรกฎาคม สิงหาคม กันยายน ตุลาคม พฤศจิกายน ธันวาคม}
mon_th = months[date.strftime("%m").to_i-1]
patient = Patient.where(:hn=>params[:hn]).first


admits = Admit.where(:patient_id=>patient.id).all

records = DataRecord.where(:admit_id=>{'$in'=>admits.collect{|i| i.id}}).order(:stamp.desc).all
w = {}
ws = records.sort{|a,b| a.stamp<=>b.stamp}
weight_int = 0
weight_cmp = 0
for i in ws
    weight = '-'
    begin	
        data = JSON.parse(i.data)
        weight = data['weight']	
        weight_int = weight.to_i
    rescue Exception=>e
    end	   
    svg = '' 
    svg = '<svg class="symbol"><use xlink:href="#t-up"/></svg>' if weight_cmp < weight_int
    svg = '<svg class="symbol"><use xlink:href="#t-down"/></svg>' if weight_cmp > weight_int
    svg = '' if weight=='-'
    w[i.stamp] = svg
    weight_cmp = weight_int
end
%>

<style>

	:root {
	    --bg-body: #00243E;
	    --bg-nav: #002748;
	    --bg-second-nav: #003357;
	    --bg-content: #000C2A;
	    --text-main:#E5E5E5;
	    --text-second:  #88B1DA;
	    --text-orange: #FFA200;
	    --text-blue: #00B3FD;
	    --text-yellow: #D2C406;
	    --text-green: #32CE0B;
	    --btn-blue: #034B87;
	  }
	  
	body{
		background: var(--bg-body);
/*		background: transparent linear-gradient(180deg, #000  0%, #13171D 100%) 0%
		0% no-repeat padding-box;*/
		height:100vh;
	}
	
	.top-header{
		background:#0a1320;
		font-size:4vh;
/*		box-shadow: 0px 0px 15px #1A3388;*/
		color:var( --text-second);
	}
</style>
<link href="<%=url_for 'css/opd.css'%>" rel="stylesheet">
<svg width="0" height="0">
    <defs>
        <g id="t-up">
        <polygon points="10,0 0,20 20,20" class="triangle_up" />
        </g>
        <g id="t-down">
        <polygon points="0,0 20,0 10,20" class="triangle" />
        </g>        
    </defs>
    <style>
    .triangle{fill:#51A451;}
    .triangle_up{fill:#F7C244;}
    .symbol{height:20px;width:20px;}
    </style>
</svg>

<div style="float:right">
            <div class="p-date">
            วันที่ <%=date.strftime("%d #{mon_th} %Y เวลา %H:%M น.")%>
            </div>
</div>

  <div style="clear:both"></div>
<div class="p-name top-header" style="padding:20px">
HN <%=patient.hn%>: <%= patient.prefix_name %><%= patient.first_name %> <%= patient.last_name %>
</div>

<!-- <script src="https://d3js.org/d3.v4.js"></script> -->
<script src="/vendor/d3/d3.min.cus.js"></script>

<div class="row" style="display:none">
    <div class="col-6">
    <div class="d-result ">
    Blood Pressure
    <div id="linechart"></div>
    
    <script>

    // set the dimensions and margins of the graph
    var margin = {top: 10, right: 30, bottom: 30, left: 60},
        width = 600 - margin.left - margin.right,
        height = 200 - margin.top - margin.bottom;
    
    // append the svg object to the body of the page
    var svg = d3.select("#linechart")
      .append("svg")
        .attr("width", width + margin.left + margin.right)
        .attr("height", height + margin.top + margin.bottom)
      .append("g")
        .attr("transform",
              "translate(" + margin.left + "," + margin.top + ")");
    
    //Read the data
    // d3.csv("https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/5_OneCatSevNumOrdered.csv", function(data) {
	    d3.csv("", function(data) {
    
      // group the data: I want to draw one line per group
      var sumstat = d3.nest() // nest function allows to group the calculation per level of a factor
        .key(function(d) { return d.name;})
        .entries(data);
    
      // Add X axis --> it is a date format
      var x = d3.scaleLinear()
        .domain(d3.extent(data, function(d) { return d.year; }))
        .range([ 0, width ]);
      svg.append("g")
        .attr("transform", "translate(0," + height + ")")
        .call(d3.axisBottom(x).ticks(5));
    
      // Add Y axis
      var y = d3.scaleLinear()
        .domain([0, d3.max(data, function(d) { return +d.n; })])
        .range([ height, 0 ]);
      svg.append("g")
        .call(d3.axisLeft(y));
    
      // color palette
      var res = sumstat.map(function(d){ return d.key }) // list of group names
      var color = d3.scaleOrdinal()
        .domain(res)
        .range(['#e41a1c','#377eb8','#4daf4a','#984ea3','#ff7f00','#ffff33','#a65628','#f781bf','#999999'])
    
      // Draw the line
      svg.selectAll(".line")
          .data(sumstat)
          .enter()
          .append("path")
            .attr("fill", "none")
            .attr("stroke", function(d){ return color(d.key) })
            .attr("stroke-width", 1.5)
            .attr("d", function(d){
              return d3.line()
                .x(function(d) { return x(d.year); })
                .y(function(d) { return y(+d.n); })
                (d.values)
            })
    
    })
    
    </script>    
    </div>
    </div>
    <div class="col">
    <div class="d-result ">
    Weight
    <div id="barchart"></div>
    
    
    <script>
    var weights = JSON.parse('[{"date":"2020-05","value":"50"},{"date":"2020-04","value":"60"},{"date":"2020-03","value":"70"},{"date":"2020-02","value":"55"}]')
    
    // set the dimensions and margins of the graph
var margin = {top: 10, right: 30, bottom: 30, left: 40},
    width = 600 - margin.left - margin.right,
    height = 200 - margin.top - margin.bottom;

// append the svg object to the body of the page
var svgbar = d3.select("#barchart")
  .append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
  .append("g")
    .attr("transform",
          "translate(" + margin.left + "," + margin.top + ")");

// get the data
// d3.csv("https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/1_OneNum.csv", function(data) {
	d3.csv("", function(data) {

  // X axis: scale and draw:
  var x = d3.scaleLinear()
      .domain([0, 1000])     // can use this instead of 1000 to have the max of data: d3.max(data, function(d) { return +d.price })
      .range([0, width]);
  svgbar.append("g")
      .attr("transform", "translate(0," + height + ")")
      .call(d3.axisBottom(x));

  // set the parameters for the histogram
  var histogram = d3.histogram()
      .value(function(d) { return d.price; })   // I need to give the vector of value
      .domain(x.domain())  // then the domain of the graphic
      .thresholds(x.ticks(70)); // then the numbers of bins

  // And apply this function to data to get the bins
  var bins = histogram(data);

  // Y axis: scale and draw:
  var y = d3.scaleLinear()
      .range([height, 0]);
      y.domain([0, d3.max(bins, function(d) { return d.length; })]);   // d3.hist has to be called before the Y axis obviously
  svgbar.append("g")
      .call(d3.axisLeft(y));

  // append the bar rectangles to the svg element
  svgbar.selectAll("rect")
      .data(bins)
      .enter()
      .append("rect")
        .attr("x", 1)
        .attr("transform", function(d) { return "translate(" + x(d.x0) + "," + y(d.length) + ")"; })
        .attr("width", function(d) { return x(d.x1) - x(d.x0) -1 ; })
        .attr("height", function(d) { return height - y(d.length); })
        .style("fill", "#69b3a2")

});
        
    </script>    
    </div>
    </div>
</div>
<div class="row-fluid">
    History Records
    <div class="d-result ">
    <table class="table table-sm ">
    <thead>
        <tr class="table-primary sticky-top">
            <th>Date</th>
            <th>Weight</th>
            <!--<th>Height</th>-->
            <th>BMI</th>
			
            <th>BP</th>
            <th>PR</th>
            <th>Spo2</th>
			
            <th>Scoring type</th>
            <th>Scoring</th>
        </tr>
    </thead>
    <tbody>
        <% 
        isFirst = true
        for i in records 
        weight = '-'
        height = '-'
        bmi = '-'
        begin	
            data = JSON.parse(i.data)
            weight = data['weight']
            height = data['height']
            bmi = data['bmi']	
        rescue Exception=>e
        end	
        
        score = 0
        badge = 'badge-success'
        begin
            score = i.score.to_i 
        rescue Exception=>e
        end
        badge = 'badge-warning' if score>1
        badge = 'badge-danger' if score>3

		%>
		
        <tr class="<%=(isFirst)?"bg-primary r-first":""%>" >
            <td><%=i.stamp.strftime('%d/%m/%Y %H:%M')%></td>
            <td><%=weight%><%=w[i.stamp]%>
            <!--<svg class="symbol">
                <use xlink:href="#t-down" />
            </svg>-->
			</td>
            <!--<td><%=height%>
            <svg class="symbol">
                <use xlink:href="#t-down" />
            </svg>
			</td>-->
              <td><%= bmi %></td>
			<td><%= i.bp %></td>
            <td><%= i.pr %></td>
            <td><%= i.spo2 %></td>
          
			    <td><%= 'OPD' %></td>
			  
            <td><span class="badge badge-pill badge-score <%=badge%>"><%=i.score%></span></td>   
        </tr>
		<% isFirst=false %>
		<% end %>
        <!-- <tr>
            <td>19/04/2020</td>
            <td>66.9 </td>
            <td>120/80</td>
            <td>NEWS</td>
            <td><span class="badge badge-pill badge-warning badge-score">4</span></td>
        </tr> -->
    </tbody>
    </table>
    </div>
    <div class="col-12">
    <center>
    <a href="index" class="btn btn-primary btn-opd">เสร็จสิ้น</a>
    <a href="log" class="btn-result-cancle">view log</a> 
    </center>
    </div>
</div>
<style>
	.p-date{
	    font-size: 1.2em;
	    text-align: center;
	    vertical-align: middle;
	    color:#6B98C1;
	    padding-bottom: 0px;
	}
	</style>
<META HTTP-EQUIV="Refresh" CONTENT="3;URL=index">
