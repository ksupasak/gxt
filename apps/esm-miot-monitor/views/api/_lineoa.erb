<%


data = request.body.read


#<Line::Bot::Event::Message:0x00007f9de0091700 @src={"type"=>"message", "message"=>{"type"=>"text", "id"=>"15225896375603", "text"=>"ok"}, "timestamp"=>1639148166272, "source"=>{"type"=>"user", "userId"=>"U7921527448ec9cbf2021991d997ab1de"}, "replyToken"=>"c78d966e81e349d1b20b77241e0f0dcd", "mode"=>"active"}>
#{"type"=>"message", "message"=>{"type"=>"text", "id"=>"15229438606003", "text"=>"f"}, "timestamp"=>1639211885245, "source"=>{"type"=>"user", "userId"=>"U7921527448ec9cbf2021991d997ab1de"}, "replyToken"=>"6108188eb56143ac95f22e2e57c9ab9a", "mode"=>"active"}
#<Line::Bot::Event::Follow:0x00007feaf0093868 @src={"type"=>"follow",                                                                       "timestamp"=>1639148427757, "source"=>{"type"=>"user", "userId"=>"Ubb2e149a6e2374f10c673d4bd106b18d"}, "replyToken"=>"57e77408eae24ac6a7b55243110ad5fd", "mode"=>"active"}>

obj = JSON.parse data


puts data.inspect
puts obj.inspect
puts



if obj['type']

type = obj['type']
timestamp = obj['timestamp']
source = obj['source']
user_id = source['userId']

line_account = nil

if user_id

  line_account = LineAccount.where(:user_id=>user_id).first
  line_account = LineAccount.create(:user_id=>user_id) unless line_account

end

if line_account.solution and line_account.solution!=""
	
	uri = URI("https://pcm-life.com/#{line_account.solution}/API/lineoa")
	hostname = uri.hostname # => "example.com"
	puts 'repost to '+line_account.solution
	req = Net::HTTP::Post.new(uri) # => #<Net::HTTP::Post POST>
	req.body = data
	req.content_type = 'application/json'
	res = Net::HTTP.start(hostname) do |http|
	  http.request(req)
	end
	
	puts 'repost to '+line_account.solution+" Completed"
	
else

case type

when 'message'

    message = obj['message']

    if message['type'] == 'text'

        line_message = LineMessage.create :type=>type, :account_id=>line_account.id, :text=>message['text'], :message_id=>message['id'], :message_type=>message['type'], :source_type=>source['type'], :user_id=>user_id, :content=>data

        if message['text'].index('#reg:')

            phone = message['text'].split(":")[-1].split("|")[0].strip
			# require zone
            provider = Provider.where(:phone=>phone).first
            if provider

                provider.update_attributes :line_account_id=>line_account.id
                line_account.update_attributes :name=>provider.name, :type=>'provider'
                line_account.send_message "#{provider.name} ลงทะเบียนสำเร็จ"

					  else

								p = message['text'].split(":")[-1].split("|")

								provider = Provider.create :name=>p[1], :phone=>p[0], :line_account_id=>line_account.id
								line_account.update_attributes :name=>provider.name, :type=>'provider'
								line_account.send_message "#{provider.name} ลงทะเบียนสำเร็จ"
						end

        else



        end


    else message['type'] == 'image'

        line_message = LineMessage.create :type=>type, :account_id=>line_account.id, :text=>'img', :message_id=>message['id'], :message_type=>message['type'], :source_type=>source['type'], :user_id=>user_id, :content=>data

		obj = JSON.parse(data)
		
		
				
		#token = '8eMkmITZA25j/s5NUz7l1clPf3eEVq0xuXDFrAJWToCKNcWq+y/qRDp2DNOHj79VFqsPwR/rR2jiyvJXmhfnre6JsL82AAQ9rqa96nH5dq4jAGWygDQUO2qH4C+GVnlhB8brpqRX+O16/zVfa1divAdB04t89/1O/w1cDnyilFU='
		
		token = Setting.get("line_channel_token")
		
		msg_id = obj['message']['id']# "463786666025811969"

		uri = URI("https://api-data.line.me/v2/bot/message/#{msg_id}/content")

		request = Net::HTTP::Get.new(uri.to_s, {'Authorization' => "Bearer #{token}"})


		Net::HTTP.start(uri.host, uri.port, :use_ssl => true) do |http|
   

		  response = http.request request # Net::HTTPResponse object

		  content =  response.body
		  zone = Zone.where(:mode=>'ems').first
		  if zone
			  
		  	admit = Admit.where(:status=>'Admitted',:zone_id=>zone.id).first
			
			if admit
				

                connection =  Mongo::Client.new Mongoid::Config.clients["default"]['hosts'], :database=>Mongoid::Threaded.database_override

                grid = Mongo::Grid::FSBucket.new(connection.database)
				filename = "line_#{msg_id}.jpg"
                fid = grid.upload_from_stream(filename,content)
				
			
				msg = Message.create :admit_id=>admit.id, :ts=>Time.now.to_i, :type=>'image', :media_type=>'image', :content=>"line_#{msg_id}.jpg", :file_id=>fid
		
		
                   path = "miot/#{@context.settings.name}/z/#{zone.name}"
                   puts "path #{path}"
                 # EM.next_tick do
send_msg = <<MSG
#{'Zone.Message'} #{path}
#{msg.to_json}
MSG

       # put
		
				   @context.settings.redis.publish(path, send_msg)	
		
		
		
					
			end
			
		  
	  	  end
		  

		end		
				
				
	end

when 'follow'

        line_message = LineMessage.create :type=>type, :line_account_id=>line_account.id, :source_type=>source['type'], :user_id=>user_id, :timestamp=>timestamp, :content=>data

else
end

end
end

%>
<%=params.inspect%>
