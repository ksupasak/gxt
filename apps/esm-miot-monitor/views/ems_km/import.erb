<%

require 'roo'	

if request.post?
	
	
	
	
    require 'roo'
    
   workbook = Roo::Spreadsheet.open params['template']['tempfile'].path
   worksheets = workbook.sheets
   puts "Found #{worksheets.count} worksheets"
	
   cmap = {}
   map = {}	
	
   worksheets.each do |worksheet|
  
       workbook.sheet(worksheet).each_row_streaming do |row|
        
       	   cols = row.map { |cell| cell.value }
    	   g = cols[0].to_i
		   if g>0
			  	
				code = cols[2]
				text = cols[3]
				color = cols[1]
				sort_order = cols[4]
				template = nil
				template = cols[5] if cols[5] and cols[5].size > 0   
				type = cols[6]
				
				
				unless map[code]
				
					map[code] = {:group=>g, :color=>color, :code=>code, :name=>"#{code} #{text}", :processes=>[], :order=>g, :template=>template, :type=>type}  
					
					if color!='instruction' and color!='report' and color!='red_add' and color!='yellow_add'  
						map[code][:processes] << {:name=>text,:order=>sort_order}  
					end
				
				else
					
					map[code][:processes] << {:name=>text,:order=>sort_order}  
					
				end
				
				# map[code][:name] = "" if color=='instruction'
				
				if color!='instruction' and color!='report'
					
					cmap[code] = {:code=>code, :name=>"#{code} #{text}",:type=>'CBD', :description=>text, :group=>g, :color=>color}
				end
				 
		   end
		   
   	   end
	   
	   
	   
	   cmap.each_pair do |k,v|
		   
		  	w = EMSCode.where(:code=>k).first
			
			unless w 
				w = EMSCode.create :code=>v[:code], :name=>v[:name], :description=>v[:description], :color=>v[:color]
			end
			
			g = EMSCodeGroup.where(:code=>v[:group].to_s).first
			unless g
				g = EMSCodeGroup.create :code=>v[:group].to_s
			end
			
			w.update_attributes :group_id=>g.id 
			
			
			
		end
	   
	   map.each_pair do |k,v|
		   
		  	w = EMSKWorkflow.where(:code=>k).first
			if w
				ps = EMSKProcess.where(:kworkflow_id=>w.id).all
				for i in ps
						
					i.destroy
						
				end
				# w.destroy
			end 
			
			d = v.clone
			
			processes = d[:processes]
			
			d.delete :processes
			
			if w
				w.update_attributes d
			else
				w = EMSKWorkflow.create(d)
			end
			
			for i in processes
				i[:kworkflow_id] = w.id
				EMSKProcess.create i
				
			end
			
			 
			 
	   end
	   
   
end
	
	
	
%>
<%= map.inspect %>

<% else %>
<form action="import" enctype="multipart/form-data" method="POST">
	
File : 

<input type="file" name="template">
	
<button value="Submit">Submit </button>	
	
</form>

<% end %>