<script>		
		function GFX() {
			
			
		    var enter = null,
    		update = null,
    		exit = null,
			context = null,
		    svg = null,
			render = null,
			viewport = null,
			viewportWidth = 0,
			viewportHeight = 0,
			xscale=null,
			yscale=null,
			colorScale =  d3.scaleOrdinal(d3.schemeCategory10);// d3.scale.category20(),
			dispatch = d3.dispatch("pageDown","pageUp"),
			startTime=Date.now(),
			endTime=null,
			drag=false,
			active=false,
			cmap= null;
		
			
		    function gfx(container) {
					
					
				cmap = {};
				hidden = {};
				
				function colorScale(i){
					
					switch(i) {
					  case 'pr':
					    return '#00b3b7'
					    break;
					  case 'hr':
					    return '#01bf02'
					    break;
				  	  case 'bp_sys':
				    	return '#5990b7'
				    	break;
			  	  	  case 'bp_dia':
			    		return '#5990b7'
			    		break;
		  		  	  case 'spo2':
		    			return '#00b3b7'
		    		    break;
	  			  	  case 'temp':
	    				return '#2F50E2'
	    			    break;
  			  	  case 'rr':
    				return '#b7851d'
    			    break;
			  	  case 'co2':
  				return '#bcaf06'
  			    break;
					  default:
					    return 'blue'
					}
					
					
				}
					
					
		        function render(resize) {
					
					// console.log('render')
					
					if (true){
		            if (true) { 
		                
						viewportWidth = parseInt(viewport.style("width"));
						viewportHeight = parseInt(viewport.style("height"));
						
		            }
				    
					// console.log(active)
					
					
   				 container.each(function() {
				  
					 	
				  
    				  	var rowSelection = container.selectAll(".row").data(context['components']);
    				   
					
   						w = viewportWidth;
						h = viewportHeight;
						
						h1w = 100;
						h3w = 80;
						
						rh = 200;
						
						h3x = w-h3w;
						mx = h1w+20;
						mw = w-h1w-h3w;
						chartHeight = 0;
							rowHeight = 120	
						
						
						
						// console.log(context);
						
						
						// console.log(w)
					
     					  //   	              g = rowSelection.enter().append("g")
   					  //
   					  //     	              .attr("class", "row")
   					  // .attr("transform", function(d,i) {
   					  //     	                         return "translate(0," + ((i * rh)) + ")";
   					  //     	                });
					  container.selectAll(".row").remove();
      	             	var fillcolor = '#cccccc'
					  xscale = d3.scaleTime().range([0, mw]);

					  yscale = d3.scaleLinear().range([chartHeight-10, 10]);


 			      var g = svg.append("g")
					    .attr("class", "row")
      			  	    .attr("transform", "translate(0,0)");

      			
							// console.log(startTime+" "+endTime+" ")
							if(startTime!=null&&endTime!=null&&xscale!=null){

			              	 		g = svg.append("g")
			            			.attr("class", "row")
							.attr("transform", "translate("+mx+",100)");
							x1 = xscale(startTime)
							x2 = xscale(endTime)
							if(x2>x1){
		   					h1 = g.append("rect")
				   			        .attr("x", x1)
									.attr("y", 0)
				   			        .attr("rx", 3)
				   			        .attr("ry", 3)
				   			        .attr("width", x2-x1 )
		   					.attr("fill",'#111')
		   			        .attr("fill-opacity", 0.10)
		   			        .attr("stroke", "#999999")
		   			        .attr("stroke-width", "1px")

							}}




				 	    

					    xscale = d3.scaleTime()
					        .range([0, mw]);

					 	yscale = d3.scaleLinear()
					        .range([chartHeight-10, 10]);


						var xAxis = d3.axisBottom(xscale);//.tickFormat(function(d){ return d.x;});
						var yAxis = d3.axisLeft(yscale);



						r = []

						for(var ci in context['components']){
								c = context['components'][ci];
								r = r.concat(c['records'])
						}
						// console.log(r)
						
						xscale.domain(d3.extent(r, function(d) { return d.time; }));
						
						
		
					currentY = chartHeight+30
					contentWidth = 	w-h1w-h3w
						
						
					if(r.length>0){
				    xscale_1 = d3.scaleTime()
				        .range([0,mw]);
					var xAxis_1 = d3.axisTop(xscale_1);//.tickFormat(function(d){ return d.x;});
					}
					
					
						
			    	xscale_2 = d3.scaleTime()
			        	.range([0,mw]);
					var xAxis_2 = d3.axisTop(xscale_2);//.tickFormat(function(d){ return d.x;});
					
						
					r = []
					r2 = []
					data = []
					now = new Date()
					from_now = (now.getTime())-600000

					for(var ci in context['components']){
							c = context['components'][ci];
							data = c['records']
							if(ci==0)
							for(var ri in c['records']){
								i = c['records'][ri]
								
								// console.log('A'+ i.time+ ' B'+ from_now+ " = "+(i.time-from_now))
								if(i.time-from_now>0)
									r2.push(i)
								else
									r.push(i)
								
							}
					}
					
					
					
					
					
					for(var ci in context['components']){
						c = context['components'][ci];
						
						cmap[c['name']] = c
						type = c['type']
						if(type=='vs'){
						
						fillcolor = '#cccccc'
							
						}
						
						
						
						// spot panel
						
					
						
						
  	                	
						
						if(type=='vs'){
							
							
							var data = c['records']
							
						for(var gi in c['groups']){
								
						
								
							group = c['groups'][gi]
								
								
							if(r.length>0){
							xscale_1.domain(d3.extent(r, function(d) { return d.time; }));
							g = svg.append("g")
							.attr("class", "row")
							.attr("transform", "translate("+h1w+"," + 0 +")");
							 g.append("g")
							 .attr("class", "x axis")
							 .attr("transform", "translate(0," + currentY + ")")
							 .attr("stroke","#aaa")
							 .call(xAxis_1);
							}
					
							xscale_2.domain(d3.extent(r2, function(d) { return d.time; }));
						
						
				
					 
							g = svg.append("g")
							.attr("class", "row")
							.attr("transform", "translate("+h1w+"," + 0 +")");
							 g.append("g")
							 .attr("class", "x axis")
							 .attr("transform", "translate(0," + (currentY+rowHeight+30) + ")")
							 .attr("stroke","#aaa")
							 .call(xAxis_2);
							 
								
								
								
  	                	g = svg.append("g")
				            	.attr("class", "row")
								.attr("transform", "translate(0," + currentY +")");
						
	   					h1 = g.append("rect")
	   			        .attr("x", h1w)
	   			        .attr("rx", 0)
	   			        .attr("ry", 0)
	   			        .attr("width", contentWidth)
	   			        .attr("height", rowHeight)
	   					.attr("fill",fillcolor)
	   			        .attr("fill-opacity", 0.10)
	   			        .attr("stroke", "#999999")
	   			        .attr("stroke-width", "1px")
						.on("click", function() {
					             var coords = d3.mouse(this);
								 // console.log(""+coords[0]+","+coords[1])
						});
						
						
	   					h2 = g.append("rect")
	   			        .attr("x", h1w)
						.attr("y", rowHeight+30)
	   			        .attr("rx", 0)
	   			        .attr("ry", 0)
	   			        .attr("width", contentWidth)
	   			        .attr("height", rowHeight)
	   					.attr("fill",fillcolor)
	   			        .attr("fill-opacity", 0.10)
	   			        .attr("stroke", "#999999")
	   			        .attr("stroke-width", "1px")
						.on("click", function() {
					             var coords = d3.mouse(this);
								 // console.log(""+coords[0]+","+coords[1])
						});
						
						// draw
						
						
						
				 			yscale = d3.scaleLinear()
				        	.range([rowHeight, 10]);		
						    
							
							
							
							var maxYValues = group['params'].map(function(p) { 
								if(hidden[p]!=true)
							        return d3.max(data, function(value) { return value[p]; })
									
							});
								
							maxY = d3.max(maxYValues);
							
							var minYValues = group['params'].map(function(p) { 
								if(hidden[p]!=true)
							        return d3.min(data, function(value) { return value[p]; })
							});
								
							minY = d3.min(minYValues);
								
								
							yscale.domain([minY-10,maxY]);
							 
							  
							  
							var yAxis = d3.axisRight(yscale);
							
						
							
								g = svg.append("g")
								.attr("class", "row")
								.attr("transform", "translate("+(mw+100)+"," + (currentY-rowHeight) +")");
								 g.append("g")
								 .attr("class", "x axis")
								 .attr("transform", "translate(0," + rowHeight + ")")
								 .attr("stroke","#aaa")
								 .call(yAxis);
								 
 								g = svg.append("g")
 								.attr("class", "row")
 								.attr("transform", "translate("+(mw+100)+"," + (currentY+30) +")");
 								 g.append("g")
 								 .attr("class", "x axis")
 								 .attr("transform", "translate(0," + rowHeight + ")")
 								 .attr("stroke","#aaa")
 								 .call(yAxis);
								 

							for (var pi  in group['params']) {

								 p = group['params'][pi]

							  // yscale.domain(d3.extent(data, function(d) { return d[p]; }));
									
  						      // yscale.domain(d3.extent(data, function(d) { return d[p]; }));
						
         	                	g = svg.append("g")
 				            	.attr("class", "row")
 								.attr("transform", "translate("+0+"," + currentY +")");

								g.append("text")
								.attr("transform", "translate(10,"+(pi*30+30)+")")
								.attr('ci',p)
								.attr("stroke", colorScale(p))
								.text('# '+p+" ")
								

								.on('click',function(){

									p = d3.select(this).attr('ci')
									
									if(hidden[p]){
										hidden[p] = false;
									}else{
										hidden[p] = true;
									}
									
									render();
	//
								})

								if(hidden[p]!=true){
								
								var line = d3.line()
						         .x(function(d) { return xscale_1(d.time); })
						         .y(function(d) { return yscale(d[p]); })

								var line_2 = d3.line()
						         .x(function(d) { return xscale_2(d.time); })
						         .y(function(d) { return yscale(d[p]); })
								 // .curve(d3.curveCatmullRom.alpha(0.5))
								if(r.length>0){
									
									
	         	                g = svg.append("g")
	 				            	.attr("class", "row")
	 								.attr("transform", "translate("+h1w+"," + currentY +")");
										
									
							   g = g.append("g")
						       	 	 g.append("path")
						             .datum(r)
						             .attr("class", "line")
									 .attr("d", line)

		    						 .attr("stroke", colorScale(p))
								     .attr("stroke-width", 2)
									 .attr("fill", "none");
								}

 	         	                g = svg.append("g")
 	 				            	.attr("class", "row")
 	 								.attr("transform", "translate("+(h1w)+"," + (currentY+rowHeight+30) +")");
								
									// console.log(data)
							   g = g.append("g")
						       	 	 g.append("path")
						             .datum(r2)
						             .attr("class", "line")
									 .attr("d", line_2)
		    						 .attr("stroke", colorScale(p))
								     .attr("stroke-width", 2)
									 .attr("fill", "none");

								 }

								}


 						
							
								
							currentY+=rowHeight*2+60	
								
								
								
							}
							
							
							
						}
						
						
						
						
					}
						
						
						
						
						
						
				  
   				  });
				 
				 
	  		// g.append("rect")
//  			        .attr("x", 100)
// 				.attr("y", 100)
//  			        .attr("rx", 3)
//  			        .attr("ry", 3)
//  			        .attr("width", 150)
//  			        .attr("height", 130)
//  					.attr("fill",'red')
//  			        .attr("fill-opacity", 0.10)
//  			        .attr("stroke", "#999999")
//  			        .attr("stroke-width", "1px")
// 	  			.on("click", function(){
// 	  				alert('odijvvfd')
// 	  			})
// 				.on("mousemove", function(){
// 					console.log('df')
// 				})
//
				 
		        }
					
					
					
			}
					 
				  gfx.render = render;     	 	
		                                                  // call render on scrolling event
       		      render(true);     
					
					
		    }
			
		    // gfx.render = function(resize) {
    // 			           console.log('resixe')                                    // placeholder function that is overridden at runtime
    // 		    };
			
			
	 
			
			gfx.tick = function(data){
			
				
				if(data['update']){
					
					for(var id in data['update'] ){
						
						i = data['update'][id];
						
						if(c = cmap[i['name']]){
							for(var rd in i['append']){
								r = i['append'][rd]
								cmap[i['name']]['records'].push(r);
								// console.log(cmap[i['name']]['records'])
								// cmap[i['name']]['records'].shift();
							}
							
							// console.log("r")
							// cmap[i['name']]['records'].push()
							gfx.render(true)
							
							
							
						}
							
						
						
						
						
					}
					
					
					
					
					
				}
				
				
				
				
			}
			
			
			
             enter  = function(rowSelection) {
                 rowSelection.append("rect")
                     .attr("rx", 3)
                     .attr("ry", 3)
                     .attr("width", "250")
                     .attr("height", "24")
                     .attr("fill-opacity", 0.25)
                     .attr("stroke", "#999999")
                     .attr("stroke-width", "2px");
                 rowSelection.append("text")
                     .attr("transform", "translate(10,15)");
             };
             update = function(rowSelection) {
                 rowSelection.select("rect")
                     .attr("fill", function(d) {
                         return colorScale(d.id);
                     });
                 rowSelection.select("text")
                     .text(function (d,i) {
                         return (i + 1) + ". " + d;
                     });
             };

             exit = function(rowSelection) {
             };
		
			

		    gfx.data = function(_) {
		        if (!arguments.length) return context;
		        context = _;
		        return gfx;
		    };

		    gfx.active = function(_) {
		        if (!arguments.length) return context;
		        active = _;
		        return gfx;
		    };
			
		    gfx.startTime = function(_) {
		        if (!arguments.length) return context;
		        startTime = _;
		        return gfx;
		    };
			
		
		 	gfx.resize = function(e){
				// width = document.body.clientWidth;
				width = $('.viewport').width();
				$('.viewport').css('width',width);
				// gfx.render(true)

		 	}
			
		    gfx.endTime = function(_) {
		        if (!arguments.length) return context;
		        endTime = _;
		        return gfx;
		    };
			
		    gfx.svg = function(_) {
		        if (!arguments.length) return svg;
		        svg = _;
		        return gfx;
		    };

		    gfx.viewport = function(_) {
		        if (!arguments.length) return viewport;
		        viewport = _;
		        return gfx;
		    };
			
		    // d3.rebind(gfx, dispatch, "on");
			

		    return gfx;
			
		}
		
</script>


