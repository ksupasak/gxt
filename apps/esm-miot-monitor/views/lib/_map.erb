<%

def self.init_map options={}
	return inline(self,:'../lib/_map_init', :options=>options)
end

def self.render_map  div, options={}
	@maps = [] unless @maps
	@maps << div
	return inline(self,:'../lib/_map_view', :div_id=>div, :options=>options)

end


def self.register  ems_map

	@maps = [] unless @maps
	@maps << ems_map.getId()

end

%>
<script>
	var map_inited = false;
	var google_maps = [];
	var map_before_init = null;
	var map_after_init = null;
	
	// alert(typeof EMSMap)

	function setMapInitCallback(before, after){
		google_maps = [];
		map_before_init = before;
		map_after_init = after;
		
		
		if(map_inited){
	
		if(map_before_init!=null){
			map_before_init.call();
		}
			 console.log(google_maps.length)
		for(var id in google_maps){
			mx = google_maps[id]
	
		  console.log("xx"+mx)
			mx.init();

		}
		if(map_after_init!=null){
			map_after_init.call();
		}
		}
		
	}
	function	 haversineDistance(lat1, lon1, lat2, lon2) {
		    const toRad = angle => angle * (Math.PI / 180);
    
		    const R = 6371; // Earth radius in km
		    const dLat = toRad(lat2 - lat1);
		    const dLon = toRad(lon2 - lon1);
		    const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
		              Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) *
		              Math.sin(dLon / 2) * Math.sin(dLon / 2);
		    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
    
		    return R * c; // Distance in km
		}

		function sortByDistance(referenceLat, referenceLon, locations) {
		    return locations.map(location => ({
		        ...location,
		        distance: haversineDistance(referenceLat, referenceLon, parseFloat(location.lat), parseFloat(location.lon))
		    })).sort((a, b) => a.distance - b.distance);
		}

	class EMSMap{


		constructor(div_id, options = {}){

			this.div_id = div_id
		
			google_maps.push(this);
				
			this.map = null
			this.center = null
			this.center_latlng = null
			this.marker = null
			this.marker_latlng = null
			this.change_callback = null

			this.options = options

			this.ready_func = [];

		}

		ready(func){
			this.ready_func.push(func);
		}

		init(){

			

		  // The location of Uluru
		  var uluru = {lat: 15.8700, lng: 100.9925};
		  // The map, centered at Uluru
		  var map_type = 'roadmap'
		  if(this.options['type']){
		  	map_type = this.options['type']
		  }


		  this.map = new google.maps.Map(document.getElementById(this.div_id), {zoom: 16, center: uluru, mapTypeId: map_type });
		  // The marker, positioned at Uluru


	      this.geocoder = new google.maps.Geocoder;
	      this.directionsService = new google.maps.DirectionsService;
	      this.directionsDisplay = new google.maps.DirectionsRenderer;
		  this.directionsDisplay.setMap(this.map);


		  // set center

		  if(this.center_latlng){

			this.center= new google.maps.LatLng(this.center_latlng[0], this.center_latlng[1] )
	    	this.map.setCenter(this.center );
			this.setPosition(this.center_latlng[0], this.center_latlng[1])

		  }


		  // set marker

		  if(this.marker_latlng){

  			if(this.marker==null){

				var pos = new google.maps.LatLng(this.marker_latlng[0], this.marker_latlng[1] )

				var cmarker = false
				if(this.options['movable']==true)
					cmarker = true

  				this.marker = new google.maps.Marker({position: pos, map: this.map, draggable:cmarker});

				if(this.options['movable']==true){
  	  		  	google.maps.event.addListener(this.marker, 'dragend', function() {
	  			  		console.log(this)
  			  		  	var position = this.marker.position
						this.setMarkerPosition(position.lat(),position.lng())
						this.map.setCenter(position)

  	  		   }.bind(this) );
			   }
  		   }


			this.setMarkerPosition(this.marker_latlng[0], this.marker_latlng[1])
		  }






		   this.map.addListener('rightclick', function(e){
			   var position = e.latLng;
			   if(this.options['movable']==true){
			   		this.setMarkerPosition(position.lat(),position.lng())
			   		this.map.setCenter(position)
			   }

		   }.bind(this))


		 console.log(this.ready_func.length)

		   for(var ifunc in this.ready_func){

			  var f = this.ready_func[ifunc];
			  f.call();



		   }


		}

		changeMarkerPosition(callback){

			this.change_callback = callback

		}
		getMap(){
			return this.map
		}

		getId(){
			return this.div_id
		}

		setPosition(lat, lng){


			this.center_latlng = [lat, lng]

			if(this.map!=null){
				this.center = new google.maps.LatLng(this.center_latlng[0], this.center_latlng[1] )
		    	this.map.setCenter(this.center );
			}

		}

		drawPath(directionsService,directionsDisplay, start, end, waypoints=[], callbackx ) {


		        directionsService.route({
		          origin: start,
		          destination: end,
		          waypoints: waypoints,
		          optimizeWaypoints: true,

		          travelMode: 'DRIVING'
		        }, function(response, status) {
		            if (status === 'OK') {
						console.log(response)
						console.log(response['routes'][0]['legs'][0])
						directionsDisplay.setDirections(response);
						callbackx(response['routes'][0]['legs'][0])

		            } else {
		            window.alert('Problem in showing direction due to ' + status);
		            }
		        }.bind(this));

			}

		setMarkerPosition(lat, lng, cb=true){

			this.marker_latlng = [lat, lng]

			if(this.map!=null){

				var latlng = new google.maps.LatLng(lat, lng )
				this.marker.setPosition(latlng)
				this.setPosition(latlng)


				if(cb&&this.change_callback!=null)
				this.change_callback(this.marker)


			}
		}


		getMarkerPosition(){

			return this.marker_latlng

		}



   	 geocode(query, callback  ){
		 		
		 let geocode = this.geocoder;
				
				
				<% 
		 
		 
		 	    geo_server = Setting.get('geocode_server')
		 
		 		if geo_server and geo_server!=""
					
					lat,lng = Setting.get('aoc_center').split(",").collect{|i| i.to_f }
				
				%>
					
				  console.log(query)
				console.log('<%=geo_server%>')
				
		 	   
				
				$.ajax({
				  url: '<%=geo_server%>/search?format=json&q='+query['address'],
				  type: 'GET',
				  dataType: 'json',
				  success: function(data) {
				    console.log('Data received:', data);
					const referenceLat = <%=lat%>;
					const referenceLon = <%=lng%>;		
					
					
					if(data.length>0){
						const sortedLocations =  sortByDistance(referenceLat, referenceLon, data);
					
					
						const googleGeocodeObject = {
				
						      formatted_address: sortedLocations[0].display_name,
			
						      geometry: {
						        location: {
						          lat: parseFloat(sortedLocations[0].lat),
						          lng: parseFloat(sortedLocations[0].lon)
						        }
						      },
						      place_id: data[0].place_id,
						      types: ["neighborhood"] // Adjust as needed
				
						};
					
						// console.log(firstLocation.lat())
							callback(googleGeocodeObject)
						
						return;
						
						
						
					}else{
						
								
							geocode.geocode(query, function(results, status) {
							// alert('geocode')
							if (status === 'OK') {
							if (results[0]) {



  	   						  var position = results[0].geometry.location;
  							  console.log(position)
							  
  	  						const googleGeocodeObject = {
				
  	  						      formatted_address: results[0].formatted_address,
			
  	  						      geometry: {
  	  						        location: {
  	  						          lat: position.lat(),
  	  						          lng: position.lng()
  	  						        }
  	  						      },
				
  	  						};
							
							callback(googleGeocodeObject)
							return;
							  // alert(results[0].formatted_address)

							} else {
							  // window.alert('No results found');
							  console.log('No results found');

							}
							} else {
							// window.alert('Geocoder failed due to: ' + status);
							console.log('Geocoder failed due to: ' + status);

							}
							}.bind(this));

					}
					
					
				
				  },
				  error: function(error) {
				    console.error('Error:', error);
				  }
				});
					
				<%
			else
				%>	
					
					
			
				
					// https://geocode.pcm-life.com/search?q=Bangna&format=json
					
	   		 		this.geocoder.geocode(query, function(results, status) {
						// alert('geocode')
	   				      if (status === 'OK') {
	   				        if (results[0]) {


	   						  var position = results[0].geometry.location;
							  console.log(position)
							  
	  						const googleGeocodeObject = {
				
	  						      formatted_address: results[0].formatted_address,
			
	  						      geometry: {
	  						        location: {
	  						          lat: position.lat(),
	  						          lng: position.lng()
	  						        }
	  						      },
				
	  						};
					
							  
							  
	   		  				 	callback(googleGeocodeObject)
	   						  // alert(results[0].formatted_address)

	   				        } else {
	   				          // window.alert('No results found');
	     				      console.log('No results found');
						  
	   				        }
	   				      } else {
	   				        // window.alert('Geocoder failed due to: ' + status);
	   				        console.log('Geocoder failed due to: ' + status);
						
	   				      }
	   				    }.bind(this));
							<%
					end
							%>	
		
				
				
   	}

	}



	function initMapMain(){
		
		setTimeout(function (){
			
			if(map_before_init!=null){
				map_before_init.call();
			}

			for(var id in google_maps){
				mx = google_maps[id]
		  console.log("xxx"+mx)
			  console.log(mx)
				mx.init();

			}
			if(map_after_init!=null){
				map_after_init.call();
			}
			
			map_inited = true;

		}, 100); // How long you want the delay to be, measured in milliseconds.

	}



</script>
