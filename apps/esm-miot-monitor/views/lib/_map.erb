<%

def self.init_map options={}
	
	return inline(self,:'../lib/_map_init', :options=>options)
end
	
def self.render_map  div, options={}
	@maps = [] unless @maps
	@maps << div
	return inline(self,:'../lib/_map_view', :div_id=>div, :options=>options)
	
end


def self.register  ems_map
	
	@maps = [] unless @maps
	@maps << ems_map.getId()
	
end
	
%>
<script>
	
	var maps = [];
	// alert(typeof EMSMap)
	
	class EMSMap{
		
		
		constructor(div_id, options = {}){
			
			this.div_id = div_id
			maps.push(this);
			this.map = null
			this.center = null
			this.center_latlng = null
			this.marker = null
			this.marker_latlng = null
			this.change_callback = null
			
			this.options = options
			
			this.ready_func = [];
			
		}
		
		ready(func){
			this.ready_func.push(func);
		}
		
		init(){
			

		
		  // The location of Uluru
		  var uluru = {lat: 15.8700, lng: 100.9925};
		  // The map, centered at Uluru
		  var map_type = 'roadmap'
		  if(this.options['type']){
		  	map_type = this.options['type']
		  }
		 
		  
		  this.map = new google.maps.Map(document.getElementById(this.div_id), {zoom: 16, center: uluru, mapTypeId: map_type });
		  // The marker, positioned at Uluru
		
		
		  
	      this.geocoder = new google.maps.Geocoder;
	      this.directionsService = new google.maps.DirectionsService;
	      this.directionsDisplay = new google.maps.DirectionsRenderer;
		  this.directionsDisplay.setMap(this.map);
		 
		
		  // set center
		
		  if(this.center_latlng){
			  
			this.center= new google.maps.LatLng(this.center_latlng[0], this.center_latlng[1] )
	    	this.map.setCenter(this.center );
			this.setPosition(this.center_latlng[0], this.center_latlng[1])
			  
		  }
		  

		  // set marker 
		  
		  if(this.marker_latlng){
			  
  			if(this.marker==null){
				
				var pos = new google.maps.LatLng(this.marker_latlng[0], this.marker_latlng[1] )
				
				var cmarker = false
				if(this.options['movable']==true)
					cmarker = true 
					
  				this.marker = new google.maps.Marker({position: pos, map: this.map, draggable:cmarker});
			
				if(this.options['movable']==true){
  	  		  	google.maps.event.addListener(this.marker, 'dragend', function() { 
	  			  		console.log(this)
  			  		  	var position = this.marker.position
						this.setMarkerPosition(position.lat(),position.lng())
						this.map.setCenter(position)
		 
  	  		   }.bind(this) );
			   }
  		   }  
			  
			  
			this.setMarkerPosition(this.marker_latlng[0], this.marker_latlng[1])
		  }
		  
		  
		  
	
		 
		   
		   this.map.addListener('rightclick', function(e){
			   var position = e.latLng;
			   if(this.options['movable']==true){
			   		this.setMarkerPosition(position.lat(),position.lng())
			   		this.map.setCenter(position)
			   }
			  
		   }.bind(this))
		   
	   			
		 console.log(this.ready_func.length)
		   
		   for(var ifunc in this.ready_func){

			  var f = this.ready_func[ifunc];
			  f.call();
		
			 

		   }

		  
		}
		
		changeMarkerPosition(callback){
	
			this.change_callback = callback
			
		}
		
		getId(){
			return this.div_id
		}
		
		setPosition(lat, lng){
			
			
			this.center_latlng = [lat, lng]
			
			if(this.map!=null){
				this.center = new google.maps.LatLng(this.center_latlng[0], this.center_latlng[1] )
		    	this.map.setCenter(this.center );
			}
			
		}
		
		drawPath(directionsService,directionsDisplay, start, end, waypoints=[], callbackx ) {
			
			
		        directionsService.route({
		          origin: start,
		          destination: end,
		          waypoints: waypoints,
		          optimizeWaypoints: true,
		
		          travelMode: 'DRIVING'
		        }, function(response, status) {
		            if (status === 'OK') {
						console.log(response)
						console.log(response['routes'][0]['legs'][0])
						directionsDisplay.setDirections(response);
						callbackx(response['routes'][0]['legs'][0])
						
		            } else {
		            window.alert('Problem in showing direction due to ' + status);
		            }
		        }.bind(this));

			}
		
		setMarkerPosition(lat, lng, cb=true){
		
			this.marker_latlng = [lat, lng]
			
			if(this.map!=null){
				
				var latlng = new google.maps.LatLng(lat, lng )
				this.marker.setPosition(latlng)
				this.setPosition(latlng)
				
					
				if(cb)
				this.change_callback(this.marker)
				
				
			}
		}
		
		

		
   	 geocode(query, callback  ){
					
   		 		this.geocoder.geocode(query, function(results, status) {
   				      if (status === 'OK') {
   				        if (results[0]) {
				     
						  
   						  var position = results[0].geometry.location;

   		  				 	callback(results[0])
   						  // alert(results[0].formatted_address)

   				        } else {
   				          window.alert('No results found');
   				        }
   				      } else {
   				        window.alert('Geocoder failed due to: ' + status);
   				      }
   				    }.bind(this));
				
   	}
		
	}

	
	
	function initMapMain(){
		setTimeout(function (){
  
			for(var id in maps){
				mx = maps[id]
				// alert(id)
				mx.init();
			
			}
            
		}, 300); // How long you want the delay to be, measured in milliseconds.

	}
	
	
	
	
	
	
	
	
	
	
</script>