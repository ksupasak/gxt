# looking for all monitor
require 'socket'
require 'timeout'


tip = '172.16.87.90'

tip = '192.168.1.6'

tip = '172.16.1.110'

tip = '192.168.253.100'

monitor_bc = '172.16.255.255'

monitor_bc = '192.16.253.255'

name = "#{Time.now.to_i}.log"
puts name
# out = File.open(name,'w')

monitor = "\xC0\xA8\xFDd\a\xD0\xC0\xA8\xFD\x01\x0E\xB6\x00\xC9\x00\x82\x00\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00\x01\x02\xF8"

monitor_62 = "\xC0\xA8\xFDd\a\xD0\xC0\xA8\xFD\x01\x0E\x0E\x00\xC9\x00\n\x00\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"


monitor_66 = "\xC0\xA8\xFDd\a\xD0\xC0\xA8\xFD\x01\x0E\xB6\x00\xC9\x00\x82\x00\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00\x01\x02\xF8"

monitor_bx = "\x01\x04\x00\x00\xAC\x10\xB6\x02bs\xA1\xCANICU|BED2\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\b\x00\x01\a\xD0\x00\x1F\x02\x00\x00\x11\x02 \x00\x13\a\xD0\x00\f\a\xD0\x00\r\a\xD0\x00\x1C\a\xD0\x00\x0E\a\xD0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"

#
# u3 = UDPSocket.new
# u3.setsockopt(Socket::SOL_SOCKET, Socket::SO_BROADCAST, true)
# u3.connect(monitor_bc,7000)
#
# u3.send monitor_bx,0

# monitor = "\x01\x04\x00\x00\xAC\x10\xB6\x02bs\xA1\xCANICU|BED2\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\b\x00\x01\a\xD0\x00\x1F\x02\x00\x00\x11\x02 \x00\x13\a\xD0\x00\f\a\xD0\x00\r\a\xD0\x00\x1C\a\xD0\x00\x0E\a\xD0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
#
#
# u3 =  UDPSocket.new
# u3.setsockopt(Socket::SOL_SOCKET, Socket::SO_BROADCAST, true)
# u3.connect(monitor_bc,7000)
#
# u3.send monitor, 0

puts 'bc' 




u2 = UDPSocket.new



puts "start 1"

last = nil

a = true

map = {}

begin

while true 



  
  
if  last ==nil or (Time.now - last)>29  
  
msg_c = "\x00\x00\x00\x00\x00\x00\xAC\x10WW\x00\x00\x00\xC9\x00#\x00\x00\x00\x00\x00\x00\x00\x00ICU|CSCS\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"

puts msg_c.size
u2.send msg_c, 0, tip,2000  
data = nil
puts 'send'
# status = Timeout::timeout(2) {
#   data = u2.recvfrom(1000)
# }
# msg = data[0]
# last_name,first_name = msg[92..107].strip.split(",")
# hn = msg[108..118].strip
  
from_monitor = "\x04\x15\x00\x00\xFA\r\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
  
last = Time.now
# msg_c = "\x00\x00\x00\x00\x00\x00~\x01\x8A\xC1\x00\x00\x00\x00\x00\"\x00\x00\x00\x00\x00\x00\x00\x00ICU|OKCS\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xFF\xFF"
msg_c = "\x00\x00\x00\x00\x00\x00\xAC\x10WW\x00\x00\x00\xCA\x00!\x00\x00\x00\x00\x00\x00\x00\x00ICU|CSCS\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
puts 'send 2'
# send tokene
u2.send msg_c, 0, tip,2000
 u2.send monitor_62, 0, tip,2000
 u2.send monitor_66, 0, tip,2000
 
end  

# puts monitor_62.size
# puts monitor_66.size


 # u2.send monitor_62, 0, tip,2000


data = u2.recvfrom(1000)

line = data[0]

puts data.inspect

if line.size==279

  # out.puts line.inspect 


line.size.times do |i| 
  
  map[i] = {} unless map[i]
  v = line[i].ord 
  map[i][v] = true
  
end

line.size.times do |i| 

  puts "#{i}\t#{map[i].keys.join("\t")}"

end

end



#
# data = nil
# status = Timeout::timeout(10) {
#   data = u2.recvfrom(1000)
# }
# msg = data[0]


# msg.size.times do |i|
#   puts "#{i}\t#{msg[i].inspect}\t#{msg[i]}\t#{msg[i].ord}"
# end

########### Vital Sign
# so2 = msg[207].ord
# pr = msg[209].ord
# sys = msg[141].ord
# dia = msg[143].ord
# hour = msg[150].ord
# min = msg[149].ord
#
#
# sense = {}
#
# sense[:ip]  = tip
# sense[:so2] = so2
# sense[:pr] = pr
# sense[:hr] = pr
# sense[:ref] = hn
# sense[:name] = station_name
# sense[:bp] = "#{sys}/#{dia}"
# sense[:hour] = hour
# sense[:min] = min
# sec = Time.now.sec
# sense[:bp_stamp]  = format("%02d%02d%02d",hour,min,0)
#
#
# puts sense.inspect




end

rescue Timeout::Error
  puts "Timed out!"

  end

#  
# 
#